{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Explore the docs \u00bb</p> <p> </p> <p>Changelog \u00b7 Report Bug \u00b7 Request Feature</p> <p></p>"},{"location":"#features","title":"\u2728 Features","text":"<ul> <li>\ud83e\udd16 AI-Powered Commit Messages: Automatically generates meaningful commit messages using LLMs that analyze git diffs and follow conventional commit standards</li> <li>\ud83c\udfaf Interactive Workflow: Provides an intuitive command-line interface with interactive prompts for confirming or editing generated commit messages</li> <li>\ud83d\udcc1 Smart Context Awareness: Uses repomix to intelligently include relevant repository files while ignoring generated and unnecessary files</li> <li>\ud83d\udd27 Highly Configurable: Supports multiple LLM providers (DeepSeek, Qwen) with customizable temperature settings and model fallbacks</li> <li>\ud83c\udfa8 Rich Terminal Experience: Features beautiful console output with live streaming responses and formatted commit message previews</li> <li>\ud83d\udcda Template-Based Prompts: Utilizes Jinja2 templates for flexible and customizable prompt engineering</li> </ul>"},{"location":"#installation","title":"\ud83d\udce6 Installation","text":"<p>To install <code>liblaf-lime</code>, run the following command:</p> <pre><code>uv add liblaf-lime\n</code></pre>"},{"location":"#local-development","title":"\u2328\ufe0f Local Development","text":"<p>You can use Github Codespaces for online development:</p> <p></p> <p>Or clone it for local development:</p> <pre><code>gh repo clone liblaf/lime\ncd lime\nmise run install\n</code></pre>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>Contributions of all types are more than welcome, if you are interested in contributing code, feel free to check out our GitHub Issues to get stuck in to show us what you\u2019re made of.</p> <p></p> <p></p>"},{"location":"#more-fruits","title":"\ud83d\udd17 More Fruits","text":"<ul> <li>\ud83c\udf47 Grapes - Supercharge your Python with rich logging, precise timing, and seamless serialization.</li> <li>\ud83c\udf49 Melon - A comprehensive Python library for 3D mesh processing with advanced I/O capabilities, proximity analysis, and integration with external mesh processing tools.</li> <li>\ud83c\udf4a Tangerine - Squeeze dynamic content into your files with Tangerine\u2019s template magic.</li> <li>\ud83c\udf4b\u200d\ud83d\udfe9 Lime - AI-powered Git commit assistant and repository documentation generator</li> <li>\ud83c\udf4e Apple - A JAX and Warp library for differentiable physics simulation, featuring elastic energy models and finite element methods.</li> <li>\ud83c\udf52 Cherries - Sweet experiment tracking with Comet, DVC, and Git integration.</li> </ul>"},{"location":"#license","title":"\ud83d\udcdd License","text":"<p>Copyright \u00a9 2025 liblaf.  This project is MIT licensed.</p>"},{"location":"reference/liblaf/lime/","title":"liblaf.lime","text":""},{"location":"reference/liblaf/lime/#liblaf.lime","title":"liblaf.lime","text":"<p>Modules:</p> <ul> <li> <code>cli</code>           \u2013            </li> <li> <code>llm</code>           \u2013            </li> <li> <code>tools</code>           \u2013            </li> <li> <code>typing</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>Commit</code>           \u2013            </li> <li> <code>Git</code>           \u2013            </li> <li> <code>LLM</code>           \u2013            </li> <li> <code>LLMArgs</code>           \u2013            </li> <li> <code>LLMConfig</code>           \u2013            </li> <li> <code>Lime</code>           \u2013            </li> <li> <code>RepomixArgs</code>           \u2013            </li> <li> <code>RouterConfig</code>           \u2013            </li> </ul> <p>Functions:</p> <ul> <li> <code>commit</code>             \u2013              </li> <li> <code>lime</code>             \u2013              </li> <li> <code>main</code>             \u2013              </li> <li> <code>prompt_templates</code>             \u2013              </li> <li> <code>repomix</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>DEFAULT_IGNORES</code>               (<code>list[str]</code>)           \u2013            </li> <li> <code>__version__</code>               (<code>str</code>)           \u2013            </li> <li> <code>__version_tuple__</code>               (<code>tuple[int | str, ...]</code>)           \u2013            </li> <li> <code>version</code>               (<code>str</code>)           \u2013            </li> <li> <code>version_tuple</code>               (<code>tuple[int | str, ...]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/lime/#liblaf.lime.DEFAULT_IGNORES","title":"DEFAULT_IGNORES  <code>module-attribute</code>","text":"<pre><code>DEFAULT_IGNORES: list[str] = [\n    \".cspell.*\",\n    \"*-lock.*\",\n    \"*.lock\",\n    \"*.lockb\",\n    \"CHANGELOG.md\",\n    \"cspell.*\",\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.__version__","title":"__version__  <code>module-attribute</code>","text":"<pre><code>__version__: str = '0.3.10.dev4+g0e23900d0'\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.__version_tuple__","title":"__version_tuple__  <code>module-attribute</code>","text":"<pre><code>__version_tuple__: tuple[int | str, ...] = (\n    0,\n    3,\n    10,\n    \"dev4\",\n    \"g0e23900d0\",\n)\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.version","title":"version  <code>module-attribute</code>","text":"<pre><code>version: str = '0.3.10.dev4+g0e23900d0'\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.version_tuple","title":"version_tuple  <code>module-attribute</code>","text":"<pre><code>version_tuple: tuple[int | str, ...] = (\n    0,\n    3,\n    10,\n    \"dev4\",\n    \"g0e23900d0\",\n)\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.Commit","title":"Commit","text":"<p>               Bases: <code>LLMArgs</code>, <code>RepomixArgs</code></p> <p>Parameters:</p> <ul> <li> <code>compress</code>               (<code>bool</code>)           \u2013            </li> <li> <code>files</code>               (<code>bool</code>)           \u2013            </li> <li> <code>truncate_base64</code>               (<code>bool</code>)           \u2013            </li> <li> <code>default_ignore</code>               (<code>bool</code>)           \u2013            </li> <li> <code>ignore</code>               (<code>list[str]</code>)           \u2013            </li> <li> <code>ignore_generated</code>               (<code>bool</code>)           \u2013            </li> <li> <code>model</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>base_url</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>api_key</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>temperature</code>               (<code>float | None</code>)           \u2013            </li> <li> <code>type</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>scope</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>breaking_change</code>               (<code>bool | None</code>)           \u2013            </li> </ul> <p>Attributes:</p> <ul> <li> <code>api_key</code>               (<code>Annotated[str | None, Arg(long=True, default=None, group=LLM)]</code>)           \u2013            </li> <li> <code>base_url</code>               (<code>Annotated[str | None, Arg(long=True, default=None, group=LLM)]</code>)           \u2013            </li> <li> <code>breaking_change</code>               (<code>Annotated[bool | None, Arg(long=[--breaking - change, --no - breaking - change], default=None, group=Commit)]</code>)           \u2013            </li> <li> <code>compress</code>               (<code>Annotated[bool, Arg(long=[--compress, --no - compress], default=False, group=Repomix)]</code>)           \u2013            </li> <li> <code>default_ignore</code>               (<code>Annotated[bool, Arg(long=[--default - ignore, --no - default - ignore], default=True, group=Repomix)]</code>)           \u2013            </li> <li> <code>files</code>               (<code>Annotated[bool, Arg(long=[--files, --no - files], default=True, group=Repomix)]</code>)           \u2013            </li> <li> <code>ignore</code>               (<code>Annotated[list[str], Arg(long=True, default=[], group=Repomix)]</code>)           \u2013            </li> <li> <code>ignore_generated</code>               (<code>Annotated[bool, Arg(long=[--ignore - generated, --no - ignore - generated], default=True, group=Repomix)]</code>)           \u2013            </li> <li> <code>model</code>               (<code>Annotated[str | None, Arg(long=True, default=None, group=LLM)]</code>)           \u2013            </li> <li> <code>scope</code>               (<code>Annotated[str | None, Arg(long=True, default=None, group=Commit)]</code>)           \u2013            </li> <li> <code>temperature</code>               (<code>Annotated[float | None, Arg(long=True, default=0.0, group=LLM)]</code>)           \u2013            </li> <li> <code>truncate_base64</code>               (<code>Annotated[bool, Arg(long=[--truncate - base64, --no - truncate - base64], default=True, group=Repomix)]</code>)           \u2013            </li> <li> <code>type</code>               (<code>Annotated[str | None, Arg(long=True, default=None, group=Commit)]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/lime/#liblaf.lime.Commit.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: Annotated[\n    str | None, Arg(long=True, default=None, group=LLM)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.Commit.base_url","title":"base_url  <code>instance-attribute</code>","text":"<pre><code>base_url: Annotated[\n    str | None, Arg(long=True, default=None, group=LLM)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.Commit.breaking_change","title":"breaking_change  <code>instance-attribute</code>","text":"<pre><code>breaking_change: Annotated[\n    bool | None,\n    Arg(\n        long=[\n            --breaking - change,\n            --no - breaking - change,\n        ],\n        default=None,\n        group=Commit,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.Commit.compress","title":"compress  <code>instance-attribute</code>","text":"<pre><code>compress: Annotated[\n    bool,\n    Arg(\n        long=[--compress, --no - compress],\n        default=False,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.Commit.default_ignore","title":"default_ignore  <code>instance-attribute</code>","text":"<pre><code>default_ignore: Annotated[\n    bool,\n    Arg(\n        long=[--default - ignore, --no - default - ignore],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.Commit.files","title":"files  <code>instance-attribute</code>","text":"<pre><code>files: Annotated[\n    bool,\n    Arg(\n        long=[--files, --no - files],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.Commit.ignore","title":"ignore  <code>instance-attribute</code>","text":"<pre><code>ignore: Annotated[\n    list[str], Arg(long=True, default=[], group=Repomix)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.Commit.ignore_generated","title":"ignore_generated  <code>instance-attribute</code>","text":"<pre><code>ignore_generated: Annotated[\n    bool,\n    Arg(\n        long=[\n            --ignore - generated,\n            --no - ignore - generated,\n        ],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.Commit.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model: Annotated[\n    str | None, Arg(long=True, default=None, group=LLM)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.Commit.scope","title":"scope  <code>instance-attribute</code>","text":"<pre><code>scope: Annotated[\n    str | None, Arg(long=True, default=None, group=Commit)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.Commit.temperature","title":"temperature  <code>instance-attribute</code>","text":"<pre><code>temperature: Annotated[\n    float | None, Arg(long=True, default=0.0, group=LLM)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.Commit.truncate_base64","title":"truncate_base64  <code>instance-attribute</code>","text":"<pre><code>truncate_base64: Annotated[\n    bool,\n    Arg(\n        long=[\n            --truncate - base64,\n            --no - truncate - base64,\n        ],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.Commit.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type: Annotated[\n    str | None, Arg(long=True, default=None, group=Commit)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.Git","title":"Git","text":"<p>Parameters:</p> <ul> <li> <code>repo</code>               (<code>Repo</code>, default:                   <code>&lt;git.repo.base.Repo '/home/runner/work/lime/lime/.git'&gt;</code> )           \u2013            </li> </ul> <p>Methods:</p> <ul> <li> <code>commit</code>             \u2013              </li> <li> <code>diff</code>             \u2013              </li> <li> <code>ls_files</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>info</code>               (<code>GitInfo</code>)           \u2013            </li> <li> <code>repo</code>               (<code>Repo</code>)           \u2013            </li> <li> <code>root</code>               (<code>Path</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/lime/#liblaf.lime.Git.info","title":"info  <code>property</code>","text":"<pre><code>info: GitInfo\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.Git.repo","title":"repo  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>repo: Repo = field(\n    factory=lambda: Repo(search_parent_directories=True)\n)\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.Git.root","title":"root  <code>property</code>","text":"<pre><code>root: Path\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.Git.commit","title":"commit  <code>async</code>","text":"<pre><code>commit(\n    message: str | None = None,\n    *,\n    edit: bool = False,\n    exit_on_error: bool = False,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/lime/tools/_git.py</code> <pre><code>async def commit(\n    self,\n    message: str | None = None,\n    *,\n    edit: bool = False,\n    exit_on_error: bool = False,\n) -&gt; None:\n    cmd: list[StrOrBytesPath] = [\"git\", \"commit\"]\n    if message:\n        cmd.append(f\"--message={message}\")\n    if edit:\n        cmd.append(\"--edit\")\n    process: asyncio.subprocess.Process = (\n        await asyncio.subprocess.create_subprocess_exec(*cmd)\n    )\n    returncode: int = await process.wait()\n    if returncode != 0:\n        if exit_on_error:\n            raise cappa.Exit(code=returncode)\n        raise subprocess.CalledProcessError(returncode, cmd)\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.Git.diff","title":"diff","text":"<pre><code>diff(include: Sequence[StrOrBytesPath] = []) -&gt; str\n</code></pre> Source code in <code>src/liblaf/lime/tools/_git.py</code> <pre><code>def diff(self, include: Sequence[StrOrBytesPath] = []) -&gt; str:\n    args: list[StrOrBytesPath] = [\n        \"--minimal\",\n        \"--no-ext-diff\",\n        \"--cached\",\n        \"--\",\n        *include,\n    ]\n    return self.repo.git.diff(*args)\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.Git.ls_files","title":"ls_files","text":"<pre><code>ls_files(\n    ignore: Sequence[str] = [],\n    *,\n    default_ignore: bool = True,\n    ignore_generated: bool = True,\n) -&gt; Generator[Path]\n</code></pre> Source code in <code>src/liblaf/lime/tools/_git.py</code> <pre><code>def ls_files(\n    self,\n    ignore: Sequence[str] = [],\n    *,\n    default_ignore: bool = True,\n    ignore_generated: bool = True,\n) -&gt; Generator[Path]:\n    if default_ignore:\n        ignore = [*DEFAULT_IGNORES, *ignore]\n    gi: gitmatch.Gitignore[str] = gitmatch.compile(ignore)\n    entries: Iterable[PathLike] = [entry for entry, _ in self.repo.index.entries]\n    entries = filter_git_lfs(entries, root=self.root)\n    for entry in entries:\n        path: Path = Path(entry)\n        if gi.match(path):\n            continue\n        if is_binary(self.root, path):\n            continue\n        if ignore_generated and is_generated(self.root, path):\n            continue\n        yield path\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.LLM","title":"LLM","text":"<p>Parameters:</p> <ul> <li> <code>model</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>router</code>               (<code>Router</code>, default:                   <code>&lt;dynamic&gt;</code> )           \u2013            </li> <li> <code>temperature</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>base_url</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>api_key</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            </li> </ul> <p>Methods:</p> <ul> <li> <code>acompletion</code>             \u2013              </li> <li> <code>from_args</code>             \u2013              </li> <li> <code>live</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>api_key</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>base_url</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>model</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>router</code>               (<code>Router</code>)           \u2013            </li> <li> <code>temperature</code>               (<code>float | None</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/lime/#liblaf.lime.LLM.api_key","title":"api_key  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>api_key: str | None = None\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.LLM.base_url","title":"base_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>base_url: str | None = None\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.LLM.model","title":"model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model: str | None = None\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.LLM.router","title":"router  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>router: Router = field(factory=Router)\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.LLM.temperature","title":"temperature  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>temperature: float | None = None\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.LLM.acompletion","title":"acompletion  <code>async</code>","text":"<pre><code>acompletion(\n    messages: str | Sequence[AllMessageValues],\n    model: str | None = None,\n    **kwargs,\n) -&gt; CustomStreamWrapper\n</code></pre> Source code in <code>src/liblaf/lime/llm/_llm.py</code> <pre><code>async def acompletion(\n    self,\n    messages: str | Sequence[litellm.AllMessageValues],\n    model: str | None = None,\n    **kwargs,\n) -&gt; litellm.CustomStreamWrapper:\n    kwargs: dict[str, Any] = self._prepare_kwargs(\n        messages=messages, model=model, **kwargs\n    )\n    return await self.router.acompletion(**kwargs)\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.LLM.from_args","title":"from_args  <code>classmethod</code>","text":"<pre><code>from_args(args: LLMArgs) -&gt; Self\n</code></pre> Source code in <code>src/liblaf/lime/llm/_llm.py</code> <pre><code>@classmethod\ndef from_args(cls, args: LLMArgs) -&gt; Self:\n    config = LLMConfig()\n    return cls(\n        model=args.model or config.model,\n        router=config.router.build(),\n        temperature=args.temperature,\n        base_url=args.base_url,\n        api_key=args.api_key,\n    )\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.LLM.live","title":"live  <code>async</code>","text":"<pre><code>live(\n    messages: str | Sequence[AllMessageValues],\n    model: str | None = None,\n    parser: Callable | None = None,\n    **kwargs,\n) -&gt; ModelResponse\n</code></pre> Source code in <code>src/liblaf/lime/llm/_llm.py</code> <pre><code>async def live(\n    self,\n    messages: str | Sequence[litellm.AllMessageValues],\n    model: str | None = None,\n    parser: Callable | None = None,\n    **kwargs,\n) -&gt; litellm.ModelResponse:\n    kwargs: dict[str, Any] = self._prepare_kwargs(\n        messages=messages, model=model, **kwargs\n    )\n    model: str = kwargs[\"model\"]\n    stream: litellm.CustomStreamWrapper = await self.router.acompletion(**kwargs)\n    chunks: list[litellm.ModelResponseStream | None] = []\n    with Live(screen=True) as live:\n        spinner: Spinner = Spinner(\n            name=\"dots\",\n            text=Text(f\"\ud83e\udd16 {model} (Waiting for response ...)\", style=\"bold cyan\"),\n            style=\"bold cyan\",\n        )\n        live.update(Group(spinner))\n        async for chunk in stream:\n            chunks.append(chunk)\n            response: litellm.ModelResponse = litellm.stream_chunk_builder(chunks)  # pyright: ignore[reportAssignmentType]\n            message: litellm.Message = response.choices[0].message  # pyright: ignore[reportAttributeAccessIssue]\n            if response.model:\n                model = response.model\n            if content := cast(\"str\", message.content):\n                spinner.update(text=Text(f\"\ud83e\udd16 {model}\", style=\"bold cyan\"))\n                if parser is not None:\n                    content: str = parser(content)\n                live.update(Group(spinner, tools.Tail(Text(content), margin=1)))\n            elif message.reasoning_content:\n                spinner.update(\n                    text=Text(f\"\ud83e\udd16 {model} (Reasoning ...)\", style=\"bold cyan\")\n                )\n                live.update(\n                    Group(\n                        spinner,\n                        tools.Tail(\n                            Text(message.reasoning_content, style=\"dim\"), margin=1\n                        ),\n                    )\n                )\n    response: litellm.ModelResponse = litellm.stream_chunk_builder(chunks)  # pyright: ignore[reportAssignmentType]\n    return response\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.LLMArgs","title":"LLMArgs","text":"<p>Parameters:</p> <ul> <li> <code>model</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>temperature</code>               (<code>float | None</code>)           \u2013            </li> <li> <code>base_url</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>api_key</code>               (<code>str | None</code>)           \u2013            </li> </ul> <p>Attributes:</p> <ul> <li> <code>api_key</code>               (<code>Annotated[str | None, Arg(long=True, default=None, group=LLM)]</code>)           \u2013            </li> <li> <code>base_url</code>               (<code>Annotated[str | None, Arg(long=True, default=None, group=LLM)]</code>)           \u2013            </li> <li> <code>model</code>               (<code>Annotated[str | None, Arg(long=True, default=None, group=LLM)]</code>)           \u2013            </li> <li> <code>temperature</code>               (<code>Annotated[float | None, Arg(long=True, default=None, group=LLM)]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/lime/#liblaf.lime.LLMArgs.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: Annotated[\n    str | None, Arg(long=True, default=None, group=LLM)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.LLMArgs.base_url","title":"base_url  <code>instance-attribute</code>","text":"<pre><code>base_url: Annotated[\n    str | None, Arg(long=True, default=None, group=LLM)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.LLMArgs.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model: Annotated[\n    str | None, Arg(long=True, default=None, group=LLM)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.LLMArgs.temperature","title":"temperature  <code>instance-attribute</code>","text":"<pre><code>temperature: Annotated[\n    float | None, Arg(long=True, default=None, group=LLM)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.LLMConfig","title":"LLMConfig","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Parameters:</p> <ul> <li> <code>model</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>router</code>               (<code>RouterConfig</code>, default:                   <code>RouterConfig(model_list=[ModelConfig(model_name='deepseek-reasoner', litellm_params=CompletionRequest(model='deepseek/deepseek-reasoner', messages=[], timeout=None, temperature=None, top_p=None, n=None, stream=None, stop=None, max_tokens=None, presence_penalty=None, frequency_penalty=None, logit_bias=None, user=None, response_format=None, seed=None, tools=None, tool_choice=None, logprobs=None, top_logprobs=None, deployment_id=None, functions=None, function_call=None, base_url=None, api_version=None, api_key=None, model_list=None), tpm=None, rpm=None), ModelConfig(model_name='deepseek-chat', litellm_params=CompletionRequest(model='deepseek/deepseek-chat', messages=[], timeout=None, temperature=None, top_p=None, n=None, stream=None, stop=None, max_tokens=None, presence_penalty=None, frequency_penalty=None, logit_bias=None, user=None, response_format=None, seed=None, tools=None, tool_choice=None, logprobs=None, top_logprobs=None, deployment_id=None, functions=None, function_call=None, base_url=None, api_version=None, api_key=None, model_list=None), tpm=None, rpm=None), ModelConfig(model_name='qwen3-coder-plus', litellm_params=CompletionRequest(model='dashscope/qwen3-coder-plus', messages=[], timeout=None, temperature=None, top_p=None, n=None, stream=None, stop=None, max_tokens=None, presence_penalty=None, frequency_penalty=None, logit_bias=None, user=None, response_format=None, seed=None, tools=None, tool_choice=None, logprobs=None, top_logprobs=None, deployment_id=None, functions=None, function_call=None, base_url=None, api_version=None, api_key=None, model_list=None), tpm=None, rpm=None)], redis_url=None, redis_host=None, redis_port=None, redis_password=None, cache_responses=False, cache_kwargs={}, caching_groups=None, client_ttl=3600, num_retries=0, timeout=None, default_litellm_params={}, set_verbose=False, fallbacks=[], allowed_fails=None, context_window_fallbacks=[{'deepseek-chat': ['qwen3-coder-plus']}, {'deepseek-reasoner': ['qwen3-coder-plus']}], model_group_alias={}, retry_after=0, routing_strategy='simple-shuffle')</code> )           \u2013            </li> </ul> <p>Methods:</p> <ul> <li> <code>settings_customise_sources</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>model</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>router</code>               (<code>RouterConfig</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/lime/#liblaf.lime.LLMConfig.model","title":"model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model: str | None = None\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.LLMConfig.router","title":"router  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>router: RouterConfig = RouterConfig()\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.LLMConfig.settings_customise_sources","title":"settings_customise_sources  <code>classmethod</code>","text":"<pre><code>settings_customise_sources(\n    settings_cls: type[BaseSettings],\n    init_settings: PydanticBaseSettingsSource,\n    env_settings: PydanticBaseSettingsSource,\n    dotenv_settings: PydanticBaseSettingsSource,\n    file_secret_settings: PydanticBaseSettingsSource,\n) -&gt; tuple[PydanticBaseSettingsSource, ...]\n</code></pre> Source code in <code>src/liblaf/lime/llm/_config.py</code> <pre><code>@override\n@classmethod\ndef settings_customise_sources(\n    cls,\n    settings_cls: type[ps.BaseSettings],\n    init_settings: ps.PydanticBaseSettingsSource,\n    env_settings: ps.PydanticBaseSettingsSource,\n    dotenv_settings: ps.PydanticBaseSettingsSource,\n    file_secret_settings: ps.PydanticBaseSettingsSource,\n) -&gt; tuple[ps.PydanticBaseSettingsSource, ...]:\n    sources: Sequence[ps.PydanticBaseSettingsSource] = (\n        super().settings_customise_sources(\n            settings_cls,\n            init_settings,\n            env_settings,\n            dotenv_settings,\n            file_secret_settings,\n        )\n    )\n    dirs: platformdirs.AppDirs = platformdirs.AppDirs(\n        appname=\"liblaf/lime\", appauthor=\"liblaf\"\n    )\n    toml_config = ps.TomlConfigSettingsSource(\n        settings_cls,\n        toml_file=[cfg / \"config.toml\" for cfg in dirs.iter_config_paths()],\n    )\n    return (*sources, toml_config)\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.Lime","title":"Lime","text":"<p>Parameters:</p> <ul> <li> <code>command</code>               (<code>Commit | Generate | Repomix</code>)           \u2013            </li> </ul> <p>Attributes:</p> <ul> <li> <code>command</code>               (<code>Subcommands[Commit | Generate | Repomix]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/lime/#liblaf.lime.Lime.command","title":"command  <code>instance-attribute</code>","text":"<pre><code>command: Subcommands[Commit | Generate | Repomix]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.RepomixArgs","title":"RepomixArgs","text":"<p>Parameters:</p> <ul> <li> <code>compress</code>               (<code>bool</code>)           \u2013            </li> <li> <code>files</code>               (<code>bool</code>)           \u2013            </li> <li> <code>truncate_base64</code>               (<code>bool</code>)           \u2013            </li> <li> <code>default_ignore</code>               (<code>bool</code>)           \u2013            </li> <li> <code>ignore</code>               (<code>list[str]</code>)           \u2013            </li> <li> <code>ignore_generated</code>               (<code>bool</code>)           \u2013            </li> </ul> <p>Attributes:</p> <ul> <li> <code>compress</code>               (<code>Annotated[bool, Arg(long=[--compress, --no - compress], default=False, group=Repomix)]</code>)           \u2013            </li> <li> <code>default_ignore</code>               (<code>Annotated[bool, Arg(long=[--default - ignore, --no - default - ignore], default=True, group=Repomix)]</code>)           \u2013            </li> <li> <code>files</code>               (<code>Annotated[bool, Arg(long=[--files, --no - files], default=True, group=Repomix)]</code>)           \u2013            </li> <li> <code>ignore</code>               (<code>Annotated[list[str], Arg(long=True, default=[], group=Repomix)]</code>)           \u2013            </li> <li> <code>ignore_generated</code>               (<code>Annotated[bool, Arg(long=[--ignore - generated, --no - ignore - generated], default=True, group=Repomix)]</code>)           \u2013            </li> <li> <code>truncate_base64</code>               (<code>Annotated[bool, Arg(long=[--truncate - base64, --no - truncate - base64], default=True, group=Repomix)]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/lime/#liblaf.lime.RepomixArgs.compress","title":"compress  <code>instance-attribute</code>","text":"<pre><code>compress: Annotated[\n    bool,\n    Arg(\n        long=[--compress, --no - compress],\n        default=False,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.RepomixArgs.default_ignore","title":"default_ignore  <code>instance-attribute</code>","text":"<pre><code>default_ignore: Annotated[\n    bool,\n    Arg(\n        long=[--default - ignore, --no - default - ignore],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.RepomixArgs.files","title":"files  <code>instance-attribute</code>","text":"<pre><code>files: Annotated[\n    bool,\n    Arg(\n        long=[--files, --no - files],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.RepomixArgs.ignore","title":"ignore  <code>instance-attribute</code>","text":"<pre><code>ignore: Annotated[\n    list[str], Arg(long=True, default=[], group=Repomix)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.RepomixArgs.ignore_generated","title":"ignore_generated  <code>instance-attribute</code>","text":"<pre><code>ignore_generated: Annotated[\n    bool,\n    Arg(\n        long=[\n            --ignore - generated,\n            --no - ignore - generated,\n        ],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.RepomixArgs.truncate_base64","title":"truncate_base64  <code>instance-attribute</code>","text":"<pre><code>truncate_base64: Annotated[\n    bool,\n    Arg(\n        long=[\n            --truncate - base64,\n            --no - truncate - base64,\n        ],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.RouterConfig","title":"RouterConfig  <code>pydantic-model</code>","text":"<p>               Bases: <code>RouterConfig</code>, <code>BaseModel</code></p> <p>Parameters:</p> <ul> <li> <code>model_list</code>               (<code>list[ModelConfig]</code>, default:                   <code>[ModelConfig(model_name='deepseek-reasoner', litellm_params=CompletionRequest(model='deepseek/deepseek-reasoner', messages=[], timeout=None, temperature=None, top_p=None, n=None, stream=None, stop=None, max_tokens=None, presence_penalty=None, frequency_penalty=None, logit_bias=None, user=None, response_format=None, seed=None, tools=None, tool_choice=None, logprobs=None, top_logprobs=None, deployment_id=None, functions=None, function_call=None, base_url=None, api_version=None, api_key=None, model_list=None), tpm=None, rpm=None), ModelConfig(model_name='deepseek-chat', litellm_params=CompletionRequest(model='deepseek/deepseek-chat', messages=[], timeout=None, temperature=None, top_p=None, n=None, stream=None, stop=None, max_tokens=None, presence_penalty=None, frequency_penalty=None, logit_bias=None, user=None, response_format=None, seed=None, tools=None, tool_choice=None, logprobs=None, top_logprobs=None, deployment_id=None, functions=None, function_call=None, base_url=None, api_version=None, api_key=None, model_list=None), tpm=None, rpm=None), ModelConfig(model_name='qwen3-coder-plus', litellm_params=CompletionRequest(model='dashscope/qwen3-coder-plus', messages=[], timeout=None, temperature=None, top_p=None, n=None, stream=None, stop=None, max_tokens=None, presence_penalty=None, frequency_penalty=None, logit_bias=None, user=None, response_format=None, seed=None, tools=None, tool_choice=None, logprobs=None, top_logprobs=None, deployment_id=None, functions=None, function_call=None, base_url=None, api_version=None, api_key=None, model_list=None), tpm=None, rpm=None)]</code> )           \u2013            </li> <li> <code>redis_url</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>redis_host</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>redis_port</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>redis_password</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>cache_responses</code>               (<code>bool | None</code>, default:                   <code>False</code> )           \u2013            </li> <li> <code>cache_kwargs</code>               (<code>Dict | None</code>, default:                   <code>{}</code> )           \u2013            </li> <li> <code>caching_groups</code>               (<code>List[Tuple[str, List[str]]] | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>client_ttl</code>               (<code>int | None</code>, default:                   <code>3600</code> )           \u2013            </li> <li> <code>num_retries</code>               (<code>int | None</code>, default:                   <code>0</code> )           \u2013            </li> <li> <code>timeout</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>default_litellm_params</code>               (<code>Dict[str, str] | None</code>, default:                   <code>{}</code> )           \u2013            </li> <li> <code>set_verbose</code>               (<code>bool | None</code>, default:                   <code>False</code> )           \u2013            </li> <li> <code>fallbacks</code>               (<code>List | None</code>, default:                   <code>[]</code> )           \u2013            </li> <li> <code>allowed_fails</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>context_window_fallbacks</code>               (<code>list[dict[str, list[str]]]</code>, default:                   <code>[{'deepseek-chat': ['qwen3-coder-plus']}, {'deepseek-reasoner': ['qwen3-coder-plus']}]</code> )           \u2013            </li> <li> <code>model_group_alias</code>               (<code>Dict[str, List[str]] | None</code>, default:                   <code>{}</code> )           \u2013            </li> <li> <code>retry_after</code>               (<code>int | None</code>, default:                   <code>0</code> )           \u2013            </li> <li> <code>routing_strategy</code>               (<code>Literal[simple - shuffle, least - busy, usage - based - routing, latency - based - routing]</code>, default:                   <code>'simple-shuffle'</code> )           \u2013            </li> </ul> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"ChatCompletionAssistantMessageParam\": {\n      \"properties\": {\n        \"role\": {\n          \"const\": \"assistant\",\n          \"title\": \"Role\",\n          \"type\": \"string\"\n        },\n        \"content\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Content\"\n        },\n        \"function_call\": {\n          \"$ref\": \"#/$defs/FunctionCall\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"tool_calls\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/ChatCompletionMessageToolCallParam\"\n          },\n          \"title\": \"Tool Calls\",\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"role\"\n      ],\n      \"title\": \"ChatCompletionAssistantMessageParam\",\n      \"type\": \"object\"\n    },\n    \"ChatCompletionContentPartImageParam\": {\n      \"properties\": {\n        \"image_url\": {\n          \"$ref\": \"#/$defs/ImageURL\"\n        },\n        \"type\": {\n          \"const\": \"image_url\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"image_url\",\n        \"type\"\n      ],\n      \"title\": \"ChatCompletionContentPartImageParam\",\n      \"type\": \"object\"\n    },\n    \"ChatCompletionContentPartTextParam\": {\n      \"properties\": {\n        \"text\": {\n          \"title\": \"Text\",\n          \"type\": \"string\"\n        },\n        \"type\": {\n          \"const\": \"text\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"text\",\n        \"type\"\n      ],\n      \"title\": \"ChatCompletionContentPartTextParam\",\n      \"type\": \"object\"\n    },\n    \"ChatCompletionFunctionMessageParam\": {\n      \"properties\": {\n        \"content\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"items\": {\n                \"anyOf\": [\n                  {\n                    \"$ref\": \"#/$defs/ChatCompletionContentPartTextParam\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/ChatCompletionContentPartImageParam\"\n                  }\n                ]\n              },\n              \"type\": \"array\"\n            }\n          ],\n          \"title\": \"Content\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"role\": {\n          \"const\": \"function\",\n          \"title\": \"Role\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"content\",\n        \"name\",\n        \"role\"\n      ],\n      \"title\": \"ChatCompletionFunctionMessageParam\",\n      \"type\": \"object\"\n    },\n    \"ChatCompletionMessageToolCallParam\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"function\": {\n          \"$ref\": \"#/$defs/Function\"\n        },\n        \"type\": {\n          \"const\": \"function\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"id\",\n        \"function\",\n        \"type\"\n      ],\n      \"title\": \"ChatCompletionMessageToolCallParam\",\n      \"type\": \"object\"\n    },\n    \"ChatCompletionSystemMessageParam\": {\n      \"properties\": {\n        \"content\": {\n          \"title\": \"Content\",\n          \"type\": \"string\"\n        },\n        \"role\": {\n          \"const\": \"system\",\n          \"title\": \"Role\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"content\",\n        \"role\"\n      ],\n      \"title\": \"ChatCompletionSystemMessageParam\",\n      \"type\": \"object\"\n    },\n    \"ChatCompletionToolMessageParam\": {\n      \"properties\": {\n        \"content\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"items\": {\n                \"anyOf\": [\n                  {\n                    \"$ref\": \"#/$defs/ChatCompletionContentPartTextParam\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/ChatCompletionContentPartImageParam\"\n                  }\n                ]\n              },\n              \"type\": \"array\"\n            }\n          ],\n          \"title\": \"Content\"\n        },\n        \"role\": {\n          \"const\": \"tool\",\n          \"title\": \"Role\",\n          \"type\": \"string\"\n        },\n        \"tool_call_id\": {\n          \"title\": \"Tool Call Id\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"content\",\n        \"role\",\n        \"tool_call_id\"\n      ],\n      \"title\": \"ChatCompletionToolMessageParam\",\n      \"type\": \"object\"\n    },\n    \"ChatCompletionUserMessageParam\": {\n      \"properties\": {\n        \"content\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"items\": {\n                \"anyOf\": [\n                  {\n                    \"$ref\": \"#/$defs/ChatCompletionContentPartTextParam\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/ChatCompletionContentPartImageParam\"\n                  }\n                ]\n              },\n              \"type\": \"array\"\n            }\n          ],\n          \"title\": \"Content\"\n        },\n        \"role\": {\n          \"const\": \"user\",\n          \"title\": \"Role\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"content\",\n        \"role\"\n      ],\n      \"title\": \"ChatCompletionUserMessageParam\",\n      \"type\": \"object\"\n    },\n    \"CompletionRequest\": {\n      \"additionalProperties\": true,\n      \"properties\": {\n        \"model\": {\n          \"title\": \"Model\",\n          \"type\": \"string\"\n        },\n        \"messages\": {\n          \"default\": [],\n          \"items\": {\n            \"anyOf\": [\n              {\n                \"$ref\": \"#/$defs/ChatCompletionSystemMessageParam\"\n              },\n              {\n                \"$ref\": \"#/$defs/ChatCompletionUserMessageParam\"\n              },\n              {\n                \"$ref\": \"#/$defs/ChatCompletionAssistantMessageParam\"\n              },\n              {\n                \"$ref\": \"#/$defs/ChatCompletionFunctionMessageParam\"\n              },\n              {\n                \"$ref\": \"#/$defs/ChatCompletionToolMessageParam\"\n              }\n            ]\n          },\n          \"title\": \"Messages\",\n          \"type\": \"array\"\n        },\n        \"timeout\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Timeout\"\n        },\n        \"temperature\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Temperature\"\n        },\n        \"top_p\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Top P\"\n        },\n        \"n\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"N\"\n        },\n        \"stream\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Stream\"\n        },\n        \"stop\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": true,\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Stop\"\n        },\n        \"max_tokens\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Max Tokens\"\n        },\n        \"presence_penalty\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Presence Penalty\"\n        },\n        \"frequency_penalty\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Frequency Penalty\"\n        },\n        \"logit_bias\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": true,\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Logit Bias\"\n        },\n        \"user\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"User\"\n        },\n        \"response_format\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": true,\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Response Format\"\n        },\n        \"seed\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Seed\"\n        },\n        \"tools\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Tools\"\n        },\n        \"tool_choice\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Tool Choice\"\n        },\n        \"logprobs\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Logprobs\"\n        },\n        \"top_logprobs\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Top Logprobs\"\n        },\n        \"deployment_id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Deployment Id\"\n        },\n        \"functions\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Functions\"\n        },\n        \"function_call\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Function Call\"\n        },\n        \"base_url\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Base Url\"\n        },\n        \"api_version\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Api Version\"\n        },\n        \"api_key\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Api Key\"\n        },\n        \"model_list\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Model List\"\n        }\n      },\n      \"required\": [\n        \"model\"\n      ],\n      \"title\": \"CompletionRequest\",\n      \"type\": \"object\"\n    },\n    \"EmbeddingRequest\": {\n      \"additionalProperties\": true,\n      \"properties\": {\n        \"model\": {\n          \"title\": \"Model\",\n          \"type\": \"string\"\n        },\n        \"input\": {\n          \"default\": [],\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"title\": \"Input\",\n          \"type\": \"array\"\n        },\n        \"timeout\": {\n          \"default\": 600,\n          \"title\": \"Timeout\",\n          \"type\": \"integer\"\n        },\n        \"api_base\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Api Base\"\n        },\n        \"api_version\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Api Version\"\n        },\n        \"api_key\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Api Key\"\n        },\n        \"api_type\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Api Type\"\n        },\n        \"caching\": {\n          \"default\": false,\n          \"title\": \"Caching\",\n          \"type\": \"boolean\"\n        },\n        \"user\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"User\"\n        },\n        \"custom_llm_provider\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"additionalProperties\": true,\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Custom Llm Provider\"\n        },\n        \"litellm_call_id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Litellm Call Id\"\n        },\n        \"litellm_logging_obj\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": true,\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Litellm Logging Obj\"\n        },\n        \"logger_fn\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Logger Fn\"\n        }\n      },\n      \"required\": [\n        \"model\"\n      ],\n      \"title\": \"EmbeddingRequest\",\n      \"type\": \"object\"\n    },\n    \"Function\": {\n      \"properties\": {\n        \"arguments\": {\n          \"title\": \"Arguments\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"arguments\",\n        \"name\"\n      ],\n      \"title\": \"Function\",\n      \"type\": \"object\"\n    },\n    \"FunctionCall\": {\n      \"properties\": {\n        \"arguments\": {\n          \"title\": \"Arguments\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"arguments\",\n        \"name\"\n      ],\n      \"title\": \"FunctionCall\",\n      \"type\": \"object\"\n    },\n    \"ImageURL\": {\n      \"properties\": {\n        \"url\": {\n          \"title\": \"Url\",\n          \"type\": \"string\"\n        },\n        \"detail\": {\n          \"enum\": [\n            \"auto\",\n            \"low\",\n            \"high\"\n          ],\n          \"title\": \"Detail\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"url\"\n      ],\n      \"title\": \"ImageURL\",\n      \"type\": \"object\"\n    },\n    \"ModelConfig\": {\n      \"properties\": {\n        \"model_name\": {\n          \"title\": \"Model Name\",\n          \"type\": \"string\"\n        },\n        \"litellm_params\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/CompletionRequest\"\n            },\n            {\n              \"$ref\": \"#/$defs/EmbeddingRequest\"\n            }\n          ],\n          \"title\": \"Litellm Params\"\n        },\n        \"tpm\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Tpm\"\n        },\n        \"rpm\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Rpm\"\n        }\n      },\n      \"required\": [\n        \"model_name\",\n        \"litellm_params\"\n      ],\n      \"title\": \"ModelConfig\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"model_list\": {\n      \"default\": [\n        {\n          \"model_name\": \"deepseek-reasoner\",\n          \"litellm_params\": {\n            \"api_key\": null,\n            \"api_version\": null,\n            \"base_url\": null,\n            \"deployment_id\": null,\n            \"frequency_penalty\": null,\n            \"function_call\": null,\n            \"functions\": null,\n            \"logit_bias\": null,\n            \"logprobs\": null,\n            \"max_tokens\": null,\n            \"messages\": [],\n            \"model\": \"deepseek/deepseek-reasoner\",\n            \"model_list\": null,\n            \"n\": null,\n            \"presence_penalty\": null,\n            \"response_format\": null,\n            \"seed\": null,\n            \"stop\": null,\n            \"stream\": null,\n            \"temperature\": null,\n            \"timeout\": null,\n            \"tool_choice\": null,\n            \"tools\": null,\n            \"top_logprobs\": null,\n            \"top_p\": null,\n            \"user\": null\n          },\n          \"tpm\": null,\n          \"rpm\": null\n        },\n        {\n          \"model_name\": \"deepseek-chat\",\n          \"litellm_params\": {\n            \"api_key\": null,\n            \"api_version\": null,\n            \"base_url\": null,\n            \"deployment_id\": null,\n            \"frequency_penalty\": null,\n            \"function_call\": null,\n            \"functions\": null,\n            \"logit_bias\": null,\n            \"logprobs\": null,\n            \"max_tokens\": null,\n            \"messages\": [],\n            \"model\": \"deepseek/deepseek-chat\",\n            \"model_list\": null,\n            \"n\": null,\n            \"presence_penalty\": null,\n            \"response_format\": null,\n            \"seed\": null,\n            \"stop\": null,\n            \"stream\": null,\n            \"temperature\": null,\n            \"timeout\": null,\n            \"tool_choice\": null,\n            \"tools\": null,\n            \"top_logprobs\": null,\n            \"top_p\": null,\n            \"user\": null\n          },\n          \"tpm\": null,\n          \"rpm\": null\n        },\n        {\n          \"model_name\": \"qwen3-coder-plus\",\n          \"litellm_params\": {\n            \"api_key\": null,\n            \"api_version\": null,\n            \"base_url\": null,\n            \"deployment_id\": null,\n            \"frequency_penalty\": null,\n            \"function_call\": null,\n            \"functions\": null,\n            \"logit_bias\": null,\n            \"logprobs\": null,\n            \"max_tokens\": null,\n            \"messages\": [],\n            \"model\": \"dashscope/qwen3-coder-plus\",\n            \"model_list\": null,\n            \"n\": null,\n            \"presence_penalty\": null,\n            \"response_format\": null,\n            \"seed\": null,\n            \"stop\": null,\n            \"stream\": null,\n            \"temperature\": null,\n            \"timeout\": null,\n            \"tool_choice\": null,\n            \"tools\": null,\n            \"top_logprobs\": null,\n            \"top_p\": null,\n            \"user\": null\n          },\n          \"tpm\": null,\n          \"rpm\": null\n        }\n      ],\n      \"items\": {\n        \"$ref\": \"#/$defs/ModelConfig\"\n      },\n      \"title\": \"Model List\",\n      \"type\": \"array\"\n    },\n    \"redis_url\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Redis Url\"\n    },\n    \"redis_host\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Redis Host\"\n    },\n    \"redis_port\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Redis Port\"\n    },\n    \"redis_password\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Redis Password\"\n    },\n    \"cache_responses\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": false,\n      \"title\": \"Cache Responses\"\n    },\n    \"cache_kwargs\": {\n      \"anyOf\": [\n        {\n          \"additionalProperties\": true,\n          \"type\": \"object\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": {},\n      \"title\": \"Cache Kwargs\"\n    },\n    \"caching_groups\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"maxItems\": 2,\n            \"minItems\": 2,\n            \"prefixItems\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"items\": {\n                  \"type\": \"string\"\n                },\n                \"type\": \"array\"\n              }\n            ],\n            \"type\": \"array\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Caching Groups\"\n    },\n    \"client_ttl\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": 3600,\n      \"title\": \"Client Ttl\"\n    },\n    \"num_retries\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": 0,\n      \"title\": \"Num Retries\"\n    },\n    \"timeout\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Timeout\"\n    },\n    \"default_litellm_params\": {\n      \"anyOf\": [\n        {\n          \"additionalProperties\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"object\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": {},\n      \"title\": \"Default Litellm Params\"\n    },\n    \"set_verbose\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": false,\n      \"title\": \"Set Verbose\"\n    },\n    \"fallbacks\": {\n      \"anyOf\": [\n        {\n          \"items\": {},\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": [],\n      \"title\": \"Fallbacks\"\n    },\n    \"allowed_fails\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Allowed Fails\"\n    },\n    \"context_window_fallbacks\": {\n      \"default\": [\n        {\n          \"deepseek-chat\": [\n            \"qwen3-coder-plus\"\n          ]\n        },\n        {\n          \"deepseek-reasoner\": [\n            \"qwen3-coder-plus\"\n          ]\n        }\n      ],\n      \"items\": {\n        \"additionalProperties\": {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        \"type\": \"object\"\n      },\n      \"title\": \"Context Window Fallbacks\",\n      \"type\": \"array\"\n    },\n    \"model_group_alias\": {\n      \"anyOf\": [\n        {\n          \"additionalProperties\": {\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          },\n          \"type\": \"object\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": {},\n      \"title\": \"Model Group Alias\"\n    },\n    \"retry_after\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": 0,\n      \"title\": \"Retry After\"\n    },\n    \"routing_strategy\": {\n      \"default\": \"simple-shuffle\",\n      \"enum\": [\n        \"simple-shuffle\",\n        \"least-busy\",\n        \"usage-based-routing\",\n        \"latency-based-routing\"\n      ],\n      \"title\": \"Routing Strategy\",\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"RouterConfig\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>model_list</code>                 (<code>list[ModelConfig]</code>)             </li> <li> <code>context_window_fallbacks</code>                 (<code>list[dict[str, list[str]]]</code>)             </li> </ul>"},{"location":"reference/liblaf/lime/#liblaf.lime.RouterConfig.context_window_fallbacks","title":"context_window_fallbacks  <code>pydantic-field</code>","text":"<pre><code>context_window_fallbacks: list[dict[str, list[str]]] = [\n    {\"deepseek-chat\": [\"qwen3-coder-plus\"]},\n    {\"deepseek-reasoner\": [\"qwen3-coder-plus\"]},\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.RouterConfig.model_list","title":"model_list  <code>pydantic-field</code>","text":"<pre><code>model_list: list[ModelConfig] = [\n    ModelConfig(\n        model_name=\"deepseek-reasoner\",\n        litellm_params=CompletionRequest(\n            model=\"deepseek/deepseek-reasoner\"\n        ),\n    ),\n    ModelConfig(\n        model_name=\"deepseek-chat\",\n        litellm_params=CompletionRequest(\n            model=\"deepseek/deepseek-chat\"\n        ),\n    ),\n    ModelConfig(\n        model_name=\"qwen3-coder-plus\",\n        litellm_params=CompletionRequest(\n            model=\"dashscope/qwen3-coder-plus\"\n        ),\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.RouterConfig.build","title":"build","text":"<pre><code>build() -&gt; Router\n</code></pre> Source code in <code>src/liblaf/lime/llm/_config.py</code> <pre><code>def build(self) -&gt; litellm.Router:\n    return litellm.Router(**self.model_dump())\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.commit","title":"commit  <code>async</code>","text":"<pre><code>commit(self: Commit) -&gt; None\n</code></pre> Source code in <code>src/liblaf/lime/cli/invoke/_commit/_commit.py</code> <pre><code>async def commit(self: Commit) -&gt; None:\n    git: tools.Git = tools.Git()\n    inputs: Inputs = Inputs.from_args(self)\n    jinja: jinja2.Environment = tools.prompt_templates()\n    llm: LLM = LLM.from_args(self)\n    template: jinja2.Template = jinja.get_template(\"commit.md\")\n\n    files: list[Path] = list(\n        git.ls_files(ignore=self.ignore, default_ignore=self.default_ignore)\n    )\n    git_diff: str = git.diff(include=files)\n    if not git_diff:\n        await git.commit(exit_on_error=True)\n        return\n    instruction: str = template.render(\n        commit_types=COMMIT_TYPES.values(), git_diff=git_diff, inputs=inputs\n    )\n    repomix: str = await tools.repomix(\n        self, include=files, instruction=instruction, root=git.root\n    )\n    response: litellm.ModelResponse = await llm.live(\n        messages=[{\"role\": \"user\", \"content\": repomix}],\n        parser=_response_parser,\n    )\n\n    content: str = litellm.get_content_from_model_response(response)\n    content = _response_parser(content)\n    rich.print(\n        Panel(\n            content,\n            title=Text(f\"\ud83e\udd16 {response.model}\", style=\"bold cyan\"),\n            title_align=\"left\",\n            border_style=\"cyan\",\n        )\n    )\n\n    action: Action = await prompt_action()\n    match action:\n        case Action.CONFIRM:\n            await git.commit(message=content, edit=False, exit_on_error=True)\n        case Action.EDIT:\n            await git.commit(message=content, edit=True, exit_on_error=True)\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.lime","title":"lime  <code>async</code>","text":"<pre><code>lime(self: Lime) -&gt; None\n</code></pre> Source code in <code>src/liblaf/lime/cli/invoke/_lime.py</code> <pre><code>async def lime(self: Lime) -&gt; None:\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.main","title":"main","text":"<pre><code>main() -&gt; None\n</code></pre> Source code in <code>src/liblaf/lime/cli/__main__.py</code> <pre><code>def main() -&gt; None:\n    asyncio.run(cappa.invoke_async(Lime, version=__version__))\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.prompt_templates","title":"prompt_templates","text":"<pre><code>prompt_templates() -&gt; Environment\n</code></pre> Source code in <code>src/liblaf/lime/tools/_prompts.py</code> <pre><code>def prompt_templates() -&gt; jinja2.Environment:\n    return jinja2.Environment(\n        line_statement_prefix=\"%%\",\n        line_comment_prefix=\"%%%\",\n        undefined=jinja2.StrictUndefined,\n        autoescape=jinja2.select_autoescape(),\n        loader=jinja2.PackageLoader(\"liblaf.lime\", \"prompts\"),\n    )\n</code></pre>"},{"location":"reference/liblaf/lime/#liblaf.lime.repomix","title":"repomix  <code>async</code>","text":"<pre><code>repomix(\n    args: RepomixArgs,\n    *,\n    include: Sequence[str | PathLike[str]] = [],\n    instruction: str | None = None,\n    root: str | PathLike[str] | None = None,\n) -&gt; str\n</code></pre> Source code in <code>src/liblaf/lime/tools/_repomix/_invoke.py</code> <pre><code>async def repomix(\n    args: RepomixArgs,\n    *,\n    include: Sequence[str | os.PathLike[str]] = [],\n    instruction: str | None = None,\n    root: str | os.PathLike[str] | None = None,\n) -&gt; str:\n    config = RepomixConfig(\n        output=RepomixConfigOutput(\n            compress=args.compress,\n            files=args.files,\n            truncate_base64=args.truncate_base64,\n        ),\n        include=list(map(str, include)),\n    )\n    with tempfile.TemporaryDirectory() as tmpdir_str:\n        tmpdir: Path = Path(tmpdir_str)\n\n        cmd: list[StrOrBytesPath] = [\"repomix\"]\n\n        output: Path = tmpdir / \"repomix-output.xml\"\n        cmd += [\"--output\", output]\n\n        if instruction:\n            instruction_file: Path = tmpdir / \"repomix-instruction.md\"\n            instruction_file.write_text(instruction)\n            cmd += [\"--instruction-file-path\", instruction_file]\n\n        config_file: Path = tmpdir / \"repomix.config.json\"\n        config_file.write_text(config.model_dump_json(exclude_none=True))\n        cmd += [\"--config\", config_file]\n\n        process: asyncio.subprocess.Process = (\n            await asyncio.subprocess.create_subprocess_exec(*cmd, cwd=root)\n        )\n        returncode: int = await process.wait()\n        if returncode != 0:\n            raise subprocess.CalledProcessError(returncode, cmd)\n        return output.read_text()\n</code></pre>"},{"location":"reference/liblaf/lime/typing/","title":"liblaf.lime.typing","text":""},{"location":"reference/liblaf/lime/typing/#liblaf.lime.typing","title":"liblaf.lime.typing","text":"<p>Type Aliases:</p> <ul> <li> <code>PathLike</code>           \u2013            </li> <li> <code>StrOrBytesPath</code>           \u2013            </li> </ul>"},{"location":"reference/liblaf/lime/typing/#liblaf.lime.typing.PathLike","title":"PathLike","text":"<pre><code>PathLike = str | PathLike[str]\n</code></pre>"},{"location":"reference/liblaf/lime/typing/#liblaf.lime.typing.StrOrBytesPath","title":"StrOrBytesPath","text":"<pre><code>StrOrBytesPath = (\n    str | bytes | PathLike[str] | PathLike[bytes]\n)\n</code></pre>"},{"location":"reference/liblaf/lime/cli/","title":"liblaf.lime.cli","text":""},{"location":"reference/liblaf/lime/cli/#liblaf.lime.cli","title":"liblaf.lime.cli","text":"<p>Modules:</p> <ul> <li> <code>invoke</code>           \u2013            </li> <li> <code>parse</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>Commit</code>           \u2013            </li> <li> <code>Lime</code>           \u2013            </li> </ul> <p>Functions:</p> <ul> <li> <code>commit</code>             \u2013              </li> <li> <code>lime</code>             \u2013              </li> <li> <code>main</code>             \u2013              </li> </ul>"},{"location":"reference/liblaf/lime/cli/#liblaf.lime.cli.Commit","title":"Commit","text":"<p>               Bases: <code>LLMArgs</code>, <code>RepomixArgs</code></p> <p>Parameters:</p> <ul> <li> <code>compress</code>               (<code>bool</code>)           \u2013            </li> <li> <code>files</code>               (<code>bool</code>)           \u2013            </li> <li> <code>truncate_base64</code>               (<code>bool</code>)           \u2013            </li> <li> <code>default_ignore</code>               (<code>bool</code>)           \u2013            </li> <li> <code>ignore</code>               (<code>list[str]</code>)           \u2013            </li> <li> <code>ignore_generated</code>               (<code>bool</code>)           \u2013            </li> <li> <code>model</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>base_url</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>api_key</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>temperature</code>               (<code>float | None</code>)           \u2013            </li> <li> <code>type</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>scope</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>breaking_change</code>               (<code>bool | None</code>)           \u2013            </li> </ul> <p>Attributes:</p> <ul> <li> <code>api_key</code>               (<code>Annotated[str | None, Arg(long=True, default=None, group=LLM)]</code>)           \u2013            </li> <li> <code>base_url</code>               (<code>Annotated[str | None, Arg(long=True, default=None, group=LLM)]</code>)           \u2013            </li> <li> <code>breaking_change</code>               (<code>Annotated[bool | None, Arg(long=[--breaking - change, --no - breaking - change], default=None, group=Commit)]</code>)           \u2013            </li> <li> <code>compress</code>               (<code>Annotated[bool, Arg(long=[--compress, --no - compress], default=False, group=Repomix)]</code>)           \u2013            </li> <li> <code>default_ignore</code>               (<code>Annotated[bool, Arg(long=[--default - ignore, --no - default - ignore], default=True, group=Repomix)]</code>)           \u2013            </li> <li> <code>files</code>               (<code>Annotated[bool, Arg(long=[--files, --no - files], default=True, group=Repomix)]</code>)           \u2013            </li> <li> <code>ignore</code>               (<code>Annotated[list[str], Arg(long=True, default=[], group=Repomix)]</code>)           \u2013            </li> <li> <code>ignore_generated</code>               (<code>Annotated[bool, Arg(long=[--ignore - generated, --no - ignore - generated], default=True, group=Repomix)]</code>)           \u2013            </li> <li> <code>model</code>               (<code>Annotated[str | None, Arg(long=True, default=None, group=LLM)]</code>)           \u2013            </li> <li> <code>scope</code>               (<code>Annotated[str | None, Arg(long=True, default=None, group=Commit)]</code>)           \u2013            </li> <li> <code>temperature</code>               (<code>Annotated[float | None, Arg(long=True, default=0.0, group=LLM)]</code>)           \u2013            </li> <li> <code>truncate_base64</code>               (<code>Annotated[bool, Arg(long=[--truncate - base64, --no - truncate - base64], default=True, group=Repomix)]</code>)           \u2013            </li> <li> <code>type</code>               (<code>Annotated[str | None, Arg(long=True, default=None, group=Commit)]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/lime/cli/#liblaf.lime.cli.Commit.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: Annotated[\n    str | None, Arg(long=True, default=None, group=LLM)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/#liblaf.lime.cli.Commit.base_url","title":"base_url  <code>instance-attribute</code>","text":"<pre><code>base_url: Annotated[\n    str | None, Arg(long=True, default=None, group=LLM)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/#liblaf.lime.cli.Commit.breaking_change","title":"breaking_change  <code>instance-attribute</code>","text":"<pre><code>breaking_change: Annotated[\n    bool | None,\n    Arg(\n        long=[\n            --breaking - change,\n            --no - breaking - change,\n        ],\n        default=None,\n        group=Commit,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/#liblaf.lime.cli.Commit.compress","title":"compress  <code>instance-attribute</code>","text":"<pre><code>compress: Annotated[\n    bool,\n    Arg(\n        long=[--compress, --no - compress],\n        default=False,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/#liblaf.lime.cli.Commit.default_ignore","title":"default_ignore  <code>instance-attribute</code>","text":"<pre><code>default_ignore: Annotated[\n    bool,\n    Arg(\n        long=[--default - ignore, --no - default - ignore],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/#liblaf.lime.cli.Commit.files","title":"files  <code>instance-attribute</code>","text":"<pre><code>files: Annotated[\n    bool,\n    Arg(\n        long=[--files, --no - files],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/#liblaf.lime.cli.Commit.ignore","title":"ignore  <code>instance-attribute</code>","text":"<pre><code>ignore: Annotated[\n    list[str], Arg(long=True, default=[], group=Repomix)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/#liblaf.lime.cli.Commit.ignore_generated","title":"ignore_generated  <code>instance-attribute</code>","text":"<pre><code>ignore_generated: Annotated[\n    bool,\n    Arg(\n        long=[\n            --ignore - generated,\n            --no - ignore - generated,\n        ],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/#liblaf.lime.cli.Commit.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model: Annotated[\n    str | None, Arg(long=True, default=None, group=LLM)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/#liblaf.lime.cli.Commit.scope","title":"scope  <code>instance-attribute</code>","text":"<pre><code>scope: Annotated[\n    str | None, Arg(long=True, default=None, group=Commit)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/#liblaf.lime.cli.Commit.temperature","title":"temperature  <code>instance-attribute</code>","text":"<pre><code>temperature: Annotated[\n    float | None, Arg(long=True, default=0.0, group=LLM)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/#liblaf.lime.cli.Commit.truncate_base64","title":"truncate_base64  <code>instance-attribute</code>","text":"<pre><code>truncate_base64: Annotated[\n    bool,\n    Arg(\n        long=[\n            --truncate - base64,\n            --no - truncate - base64,\n        ],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/#liblaf.lime.cli.Commit.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type: Annotated[\n    str | None, Arg(long=True, default=None, group=Commit)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/#liblaf.lime.cli.Lime","title":"Lime","text":"<p>Parameters:</p> <ul> <li> <code>command</code>               (<code>Commit | Generate | Repomix</code>)           \u2013            </li> </ul> <p>Attributes:</p> <ul> <li> <code>command</code>               (<code>Subcommands[Commit | Generate | Repomix]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/lime/cli/#liblaf.lime.cli.Lime.command","title":"command  <code>instance-attribute</code>","text":"<pre><code>command: Subcommands[Commit | Generate | Repomix]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/#liblaf.lime.cli.commit","title":"commit  <code>async</code>","text":"<pre><code>commit(self: Commit) -&gt; None\n</code></pre> Source code in <code>src/liblaf/lime/cli/invoke/_commit/_commit.py</code> <pre><code>async def commit(self: Commit) -&gt; None:\n    git: tools.Git = tools.Git()\n    inputs: Inputs = Inputs.from_args(self)\n    jinja: jinja2.Environment = tools.prompt_templates()\n    llm: LLM = LLM.from_args(self)\n    template: jinja2.Template = jinja.get_template(\"commit.md\")\n\n    files: list[Path] = list(\n        git.ls_files(ignore=self.ignore, default_ignore=self.default_ignore)\n    )\n    git_diff: str = git.diff(include=files)\n    if not git_diff:\n        await git.commit(exit_on_error=True)\n        return\n    instruction: str = template.render(\n        commit_types=COMMIT_TYPES.values(), git_diff=git_diff, inputs=inputs\n    )\n    repomix: str = await tools.repomix(\n        self, include=files, instruction=instruction, root=git.root\n    )\n    response: litellm.ModelResponse = await llm.live(\n        messages=[{\"role\": \"user\", \"content\": repomix}],\n        parser=_response_parser,\n    )\n\n    content: str = litellm.get_content_from_model_response(response)\n    content = _response_parser(content)\n    rich.print(\n        Panel(\n            content,\n            title=Text(f\"\ud83e\udd16 {response.model}\", style=\"bold cyan\"),\n            title_align=\"left\",\n            border_style=\"cyan\",\n        )\n    )\n\n    action: Action = await prompt_action()\n    match action:\n        case Action.CONFIRM:\n            await git.commit(message=content, edit=False, exit_on_error=True)\n        case Action.EDIT:\n            await git.commit(message=content, edit=True, exit_on_error=True)\n</code></pre>"},{"location":"reference/liblaf/lime/cli/#liblaf.lime.cli.lime","title":"lime  <code>async</code>","text":"<pre><code>lime(self: Lime) -&gt; None\n</code></pre> Source code in <code>src/liblaf/lime/cli/invoke/_lime.py</code> <pre><code>async def lime(self: Lime) -&gt; None:\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/liblaf/lime/cli/#liblaf.lime.cli.main","title":"main","text":"<pre><code>main() -&gt; None\n</code></pre> Source code in <code>src/liblaf/lime/cli/__main__.py</code> <pre><code>def main() -&gt; None:\n    asyncio.run(cappa.invoke_async(Lime, version=__version__))\n</code></pre>"},{"location":"reference/liblaf/lime/cli/invoke/","title":"liblaf.lime.cli.invoke","text":""},{"location":"reference/liblaf/lime/cli/invoke/#liblaf.lime.cli.invoke","title":"liblaf.lime.cli.invoke","text":"<p>Functions:</p> <ul> <li> <code>commit</code>             \u2013              </li> <li> <code>generate</code>             \u2013              </li> <li> <code>lime</code>             \u2013              </li> <li> <code>repomix</code>             \u2013              </li> </ul>"},{"location":"reference/liblaf/lime/cli/invoke/#liblaf.lime.cli.invoke.commit","title":"commit  <code>async</code>","text":"<pre><code>commit(self: Commit) -&gt; None\n</code></pre> Source code in <code>src/liblaf/lime/cli/invoke/_commit/_commit.py</code> <pre><code>async def commit(self: Commit) -&gt; None:\n    git: tools.Git = tools.Git()\n    inputs: Inputs = Inputs.from_args(self)\n    jinja: jinja2.Environment = tools.prompt_templates()\n    llm: LLM = LLM.from_args(self)\n    template: jinja2.Template = jinja.get_template(\"commit.md\")\n\n    files: list[Path] = list(\n        git.ls_files(ignore=self.ignore, default_ignore=self.default_ignore)\n    )\n    git_diff: str = git.diff(include=files)\n    if not git_diff:\n        await git.commit(exit_on_error=True)\n        return\n    instruction: str = template.render(\n        commit_types=COMMIT_TYPES.values(), git_diff=git_diff, inputs=inputs\n    )\n    repomix: str = await tools.repomix(\n        self, include=files, instruction=instruction, root=git.root\n    )\n    response: litellm.ModelResponse = await llm.live(\n        messages=[{\"role\": \"user\", \"content\": repomix}],\n        parser=_response_parser,\n    )\n\n    content: str = litellm.get_content_from_model_response(response)\n    content = _response_parser(content)\n    rich.print(\n        Panel(\n            content,\n            title=Text(f\"\ud83e\udd16 {response.model}\", style=\"bold cyan\"),\n            title_align=\"left\",\n            border_style=\"cyan\",\n        )\n    )\n\n    action: Action = await prompt_action()\n    match action:\n        case Action.CONFIRM:\n            await git.commit(message=content, edit=False, exit_on_error=True)\n        case Action.EDIT:\n            await git.commit(message=content, edit=True, exit_on_error=True)\n</code></pre>"},{"location":"reference/liblaf/lime/cli/invoke/#liblaf.lime.cli.invoke.generate","title":"generate  <code>async</code>","text":"<pre><code>generate(self: Generate) -&gt; None\n</code></pre> Source code in <code>src/liblaf/lime/cli/invoke/_generate.py</code> <pre><code>async def generate(self: Generate) -&gt; None:\n    git: tools.Git = tools.Git()\n    llm: LLM = LLM.from_args(self)\n    files: list[Path] = list(\n        git.ls_files(ignore=self.ignore, default_ignore=self.default_ignore)\n    )\n    jinja: jinja2.Environment = tools.prompt_templates()\n    template: jinja2.Template = jinja.get_template(self.prompt)\n    instruction: str = template.render()\n    repomix: str = await tools.repomix(\n        self, include=files, instruction=instruction, root=git.root\n    )\n    response: litellm.ModelResponse = await llm.live(\n        messages=[{\"role\": \"user\", \"content\": repomix}],\n    )\n    content: str = litellm.get_content_from_model_response(response)\n    print(content)\n</code></pre>"},{"location":"reference/liblaf/lime/cli/invoke/#liblaf.lime.cli.invoke.lime","title":"lime  <code>async</code>","text":"<pre><code>lime(self: Lime) -&gt; None\n</code></pre> Source code in <code>src/liblaf/lime/cli/invoke/_lime.py</code> <pre><code>async def lime(self: Lime) -&gt; None:\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/liblaf/lime/cli/invoke/#liblaf.lime.cli.invoke.repomix","title":"repomix  <code>async</code>","text":"<pre><code>repomix(self: Repomix) -&gt; None\n</code></pre> Source code in <code>src/liblaf/lime/cli/invoke/_repomix.py</code> <pre><code>async def repomix(self: Repomix) -&gt; None:\n    git: tools.Git = tools.Git()\n    files: list[Path] = list(\n        git.ls_files(ignore=self.ignore, default_ignore=self.default_ignore)\n    )\n    instruction: str | None = None\n    if self.instruction:\n        instruction = self.instruction\n    elif self.instruction_file:\n        instruction = self.instruction_file.read_text()\n    repomix: str = await tools.repomix(\n        self, include=files, instruction=instruction, root=git.root\n    )\n    self.output.write_text(repomix)\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/","title":"liblaf.lime.cli.parse","text":""},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse","title":"liblaf.lime.cli.parse","text":"<p>Classes:</p> <ul> <li> <code>Commit</code>           \u2013            </li> <li> <code>Generate</code>           \u2013            </li> <li> <code>Lime</code>           \u2013            </li> <li> <code>Repomix</code>           \u2013            </li> </ul>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Commit","title":"Commit","text":"<p>               Bases: <code>LLMArgs</code>, <code>RepomixArgs</code></p> <p>Parameters:</p> <ul> <li> <code>compress</code>               (<code>bool</code>)           \u2013            </li> <li> <code>files</code>               (<code>bool</code>)           \u2013            </li> <li> <code>truncate_base64</code>               (<code>bool</code>)           \u2013            </li> <li> <code>default_ignore</code>               (<code>bool</code>)           \u2013            </li> <li> <code>ignore</code>               (<code>list[str]</code>)           \u2013            </li> <li> <code>ignore_generated</code>               (<code>bool</code>)           \u2013            </li> <li> <code>model</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>base_url</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>api_key</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>temperature</code>               (<code>float | None</code>)           \u2013            </li> <li> <code>type</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>scope</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>breaking_change</code>               (<code>bool | None</code>)           \u2013            </li> </ul> <p>Attributes:</p> <ul> <li> <code>api_key</code>               (<code>Annotated[str | None, Arg(long=True, default=None, group=LLM)]</code>)           \u2013            </li> <li> <code>base_url</code>               (<code>Annotated[str | None, Arg(long=True, default=None, group=LLM)]</code>)           \u2013            </li> <li> <code>breaking_change</code>               (<code>Annotated[bool | None, Arg(long=[--breaking - change, --no - breaking - change], default=None, group=Commit)]</code>)           \u2013            </li> <li> <code>compress</code>               (<code>Annotated[bool, Arg(long=[--compress, --no - compress], default=False, group=Repomix)]</code>)           \u2013            </li> <li> <code>default_ignore</code>               (<code>Annotated[bool, Arg(long=[--default - ignore, --no - default - ignore], default=True, group=Repomix)]</code>)           \u2013            </li> <li> <code>files</code>               (<code>Annotated[bool, Arg(long=[--files, --no - files], default=True, group=Repomix)]</code>)           \u2013            </li> <li> <code>ignore</code>               (<code>Annotated[list[str], Arg(long=True, default=[], group=Repomix)]</code>)           \u2013            </li> <li> <code>ignore_generated</code>               (<code>Annotated[bool, Arg(long=[--ignore - generated, --no - ignore - generated], default=True, group=Repomix)]</code>)           \u2013            </li> <li> <code>model</code>               (<code>Annotated[str | None, Arg(long=True, default=None, group=LLM)]</code>)           \u2013            </li> <li> <code>scope</code>               (<code>Annotated[str | None, Arg(long=True, default=None, group=Commit)]</code>)           \u2013            </li> <li> <code>temperature</code>               (<code>Annotated[float | None, Arg(long=True, default=0.0, group=LLM)]</code>)           \u2013            </li> <li> <code>truncate_base64</code>               (<code>Annotated[bool, Arg(long=[--truncate - base64, --no - truncate - base64], default=True, group=Repomix)]</code>)           \u2013            </li> <li> <code>type</code>               (<code>Annotated[str | None, Arg(long=True, default=None, group=Commit)]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Commit.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: Annotated[\n    str | None, Arg(long=True, default=None, group=LLM)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Commit.base_url","title":"base_url  <code>instance-attribute</code>","text":"<pre><code>base_url: Annotated[\n    str | None, Arg(long=True, default=None, group=LLM)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Commit.breaking_change","title":"breaking_change  <code>instance-attribute</code>","text":"<pre><code>breaking_change: Annotated[\n    bool | None,\n    Arg(\n        long=[\n            --breaking - change,\n            --no - breaking - change,\n        ],\n        default=None,\n        group=Commit,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Commit.compress","title":"compress  <code>instance-attribute</code>","text":"<pre><code>compress: Annotated[\n    bool,\n    Arg(\n        long=[--compress, --no - compress],\n        default=False,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Commit.default_ignore","title":"default_ignore  <code>instance-attribute</code>","text":"<pre><code>default_ignore: Annotated[\n    bool,\n    Arg(\n        long=[--default - ignore, --no - default - ignore],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Commit.files","title":"files  <code>instance-attribute</code>","text":"<pre><code>files: Annotated[\n    bool,\n    Arg(\n        long=[--files, --no - files],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Commit.ignore","title":"ignore  <code>instance-attribute</code>","text":"<pre><code>ignore: Annotated[\n    list[str], Arg(long=True, default=[], group=Repomix)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Commit.ignore_generated","title":"ignore_generated  <code>instance-attribute</code>","text":"<pre><code>ignore_generated: Annotated[\n    bool,\n    Arg(\n        long=[\n            --ignore - generated,\n            --no - ignore - generated,\n        ],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Commit.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model: Annotated[\n    str | None, Arg(long=True, default=None, group=LLM)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Commit.scope","title":"scope  <code>instance-attribute</code>","text":"<pre><code>scope: Annotated[\n    str | None, Arg(long=True, default=None, group=Commit)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Commit.temperature","title":"temperature  <code>instance-attribute</code>","text":"<pre><code>temperature: Annotated[\n    float | None, Arg(long=True, default=0.0, group=LLM)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Commit.truncate_base64","title":"truncate_base64  <code>instance-attribute</code>","text":"<pre><code>truncate_base64: Annotated[\n    bool,\n    Arg(\n        long=[\n            --truncate - base64,\n            --no - truncate - base64,\n        ],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Commit.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type: Annotated[\n    str | None, Arg(long=True, default=None, group=Commit)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Generate","title":"Generate","text":"<p>               Bases: <code>LLMArgs</code>, <code>RepomixArgs</code></p> <p>Parameters:</p> <ul> <li> <code>compress</code>               (<code>bool</code>)           \u2013            </li> <li> <code>files</code>               (<code>bool</code>)           \u2013            </li> <li> <code>truncate_base64</code>               (<code>bool</code>)           \u2013            </li> <li> <code>default_ignore</code>               (<code>bool</code>)           \u2013            </li> <li> <code>ignore</code>               (<code>list[str]</code>)           \u2013            </li> <li> <code>ignore_generated</code>               (<code>bool</code>)           \u2013            </li> <li> <code>model</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>temperature</code>               (<code>float | None</code>)           \u2013            </li> <li> <code>base_url</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>api_key</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>prompt</code>               (<code>str</code>)           \u2013            </li> </ul> <p>Attributes:</p> <ul> <li> <code>api_key</code>               (<code>Annotated[str | None, Arg(long=True, default=None, group=LLM)]</code>)           \u2013            </li> <li> <code>base_url</code>               (<code>Annotated[str | None, Arg(long=True, default=None, group=LLM)]</code>)           \u2013            </li> <li> <code>compress</code>               (<code>Annotated[bool, Arg(long=[--compress, --no - compress], default=False, group=Repomix)]</code>)           \u2013            </li> <li> <code>default_ignore</code>               (<code>Annotated[bool, Arg(long=[--default - ignore, --no - default - ignore], default=True, group=Repomix)]</code>)           \u2013            </li> <li> <code>files</code>               (<code>Annotated[bool, Arg(long=[--files, --no - files], default=True, group=Repomix)]</code>)           \u2013            </li> <li> <code>ignore</code>               (<code>Annotated[list[str], Arg(long=True, default=[], group=Repomix)]</code>)           \u2013            </li> <li> <code>ignore_generated</code>               (<code>Annotated[bool, Arg(long=[--ignore - generated, --no - ignore - generated], default=True, group=Repomix)]</code>)           \u2013            </li> <li> <code>model</code>               (<code>Annotated[str | None, Arg(long=True, default=None, group=LLM)]</code>)           \u2013            </li> <li> <code>prompt</code>               (<code>Annotated[str, Arg()]</code>)           \u2013            </li> <li> <code>temperature</code>               (<code>Annotated[float | None, Arg(long=True, default=None, group=LLM)]</code>)           \u2013            </li> <li> <code>truncate_base64</code>               (<code>Annotated[bool, Arg(long=[--truncate - base64, --no - truncate - base64], default=True, group=Repomix)]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Generate.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: Annotated[\n    str | None, Arg(long=True, default=None, group=LLM)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Generate.base_url","title":"base_url  <code>instance-attribute</code>","text":"<pre><code>base_url: Annotated[\n    str | None, Arg(long=True, default=None, group=LLM)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Generate.compress","title":"compress  <code>instance-attribute</code>","text":"<pre><code>compress: Annotated[\n    bool,\n    Arg(\n        long=[--compress, --no - compress],\n        default=False,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Generate.default_ignore","title":"default_ignore  <code>instance-attribute</code>","text":"<pre><code>default_ignore: Annotated[\n    bool,\n    Arg(\n        long=[--default - ignore, --no - default - ignore],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Generate.files","title":"files  <code>instance-attribute</code>","text":"<pre><code>files: Annotated[\n    bool,\n    Arg(\n        long=[--files, --no - files],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Generate.ignore","title":"ignore  <code>instance-attribute</code>","text":"<pre><code>ignore: Annotated[\n    list[str], Arg(long=True, default=[], group=Repomix)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Generate.ignore_generated","title":"ignore_generated  <code>instance-attribute</code>","text":"<pre><code>ignore_generated: Annotated[\n    bool,\n    Arg(\n        long=[\n            --ignore - generated,\n            --no - ignore - generated,\n        ],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Generate.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model: Annotated[\n    str | None, Arg(long=True, default=None, group=LLM)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Generate.prompt","title":"prompt  <code>instance-attribute</code>","text":"<pre><code>prompt: Annotated[str, Arg()]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Generate.temperature","title":"temperature  <code>instance-attribute</code>","text":"<pre><code>temperature: Annotated[\n    float | None, Arg(long=True, default=None, group=LLM)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Generate.truncate_base64","title":"truncate_base64  <code>instance-attribute</code>","text":"<pre><code>truncate_base64: Annotated[\n    bool,\n    Arg(\n        long=[\n            --truncate - base64,\n            --no - truncate - base64,\n        ],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Lime","title":"Lime","text":"<p>Parameters:</p> <ul> <li> <code>command</code>               (<code>Commit | Generate | Repomix</code>)           \u2013            </li> </ul> <p>Attributes:</p> <ul> <li> <code>command</code>               (<code>Subcommands[Commit | Generate | Repomix]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Lime.command","title":"command  <code>instance-attribute</code>","text":"<pre><code>command: Subcommands[Commit | Generate | Repomix]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Repomix","title":"Repomix","text":"<p>               Bases: <code>RepomixArgs</code></p> <p>Parameters:</p> <ul> <li> <code>compress</code>               (<code>bool</code>)           \u2013            </li> <li> <code>files</code>               (<code>bool</code>)           \u2013            </li> <li> <code>truncate_base64</code>               (<code>bool</code>)           \u2013            </li> <li> <code>default_ignore</code>               (<code>bool</code>)           \u2013            </li> <li> <code>ignore</code>               (<code>list[str]</code>)           \u2013            </li> <li> <code>ignore_generated</code>               (<code>bool</code>)           \u2013            </li> <li> <code>instruction</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>instruction_file</code>               (<code>Path | None</code>)           \u2013            </li> <li> <code>output</code>               (<code>Path</code>)           \u2013            </li> </ul> <p>Attributes:</p> <ul> <li> <code>compress</code>               (<code>Annotated[bool, Arg(long=[--compress, --no - compress], default=False, group=Repomix)]</code>)           \u2013            </li> <li> <code>default_ignore</code>               (<code>Annotated[bool, Arg(long=[--default - ignore, --no - default - ignore], default=True, group=Repomix)]</code>)           \u2013            </li> <li> <code>files</code>               (<code>Annotated[bool, Arg(long=[--files, --no - files], default=True, group=Repomix)]</code>)           \u2013            </li> <li> <code>ignore</code>               (<code>Annotated[list[str], Arg(long=True, default=[], group=Repomix)]</code>)           \u2013            </li> <li> <code>ignore_generated</code>               (<code>Annotated[bool, Arg(long=[--ignore - generated, --no - ignore - generated], default=True, group=Repomix)]</code>)           \u2013            </li> <li> <code>instruction</code>               (<code>Annotated[str | None, Arg(long=True, default=None, group=Repomix)]</code>)           \u2013            </li> <li> <code>instruction_file</code>               (<code>Annotated[Path | None, Arg(long=True, default=None, group=Repomix)]</code>)           \u2013            </li> <li> <code>output</code>               (<code>Annotated[Path, Arg(long=True, default=Path(repomix - xml), group=Repomix)]</code>)           \u2013            </li> <li> <code>truncate_base64</code>               (<code>Annotated[bool, Arg(long=[--truncate - base64, --no - truncate - base64], default=True, group=Repomix)]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Repomix.compress","title":"compress  <code>instance-attribute</code>","text":"<pre><code>compress: Annotated[\n    bool,\n    Arg(\n        long=[--compress, --no - compress],\n        default=False,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Repomix.default_ignore","title":"default_ignore  <code>instance-attribute</code>","text":"<pre><code>default_ignore: Annotated[\n    bool,\n    Arg(\n        long=[--default - ignore, --no - default - ignore],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Repomix.files","title":"files  <code>instance-attribute</code>","text":"<pre><code>files: Annotated[\n    bool,\n    Arg(\n        long=[--files, --no - files],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Repomix.ignore","title":"ignore  <code>instance-attribute</code>","text":"<pre><code>ignore: Annotated[\n    list[str], Arg(long=True, default=[], group=Repomix)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Repomix.ignore_generated","title":"ignore_generated  <code>instance-attribute</code>","text":"<pre><code>ignore_generated: Annotated[\n    bool,\n    Arg(\n        long=[\n            --ignore - generated,\n            --no - ignore - generated,\n        ],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Repomix.instruction","title":"instruction  <code>instance-attribute</code>","text":"<pre><code>instruction: Annotated[\n    str | None, Arg(long=True, default=None, group=Repomix)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Repomix.instruction_file","title":"instruction_file  <code>instance-attribute</code>","text":"<pre><code>instruction_file: Annotated[\n    Path | None, Arg(long=True, default=None, group=Repomix)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Repomix.output","title":"output  <code>instance-attribute</code>","text":"<pre><code>output: Annotated[\n    Path,\n    Arg(\n        long=True,\n        default=Path(repomix - xml),\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/cli/parse/#liblaf.lime.cli.parse.Repomix.truncate_base64","title":"truncate_base64  <code>instance-attribute</code>","text":"<pre><code>truncate_base64: Annotated[\n    bool,\n    Arg(\n        long=[\n            --truncate - base64,\n            --no - truncate - base64,\n        ],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/llm/","title":"liblaf.lime.llm","text":""},{"location":"reference/liblaf/lime/llm/#liblaf.lime.llm","title":"liblaf.lime.llm","text":"<p>Classes:</p> <ul> <li> <code>LLM</code>           \u2013            </li> <li> <code>LLMArgs</code>           \u2013            </li> <li> <code>LLMConfig</code>           \u2013            </li> <li> <code>RouterConfig</code>           \u2013            </li> </ul>"},{"location":"reference/liblaf/lime/llm/#liblaf.lime.llm.LLM","title":"LLM","text":"<p>Parameters:</p> <ul> <li> <code>model</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>router</code>               (<code>Router</code>, default:                   <code>&lt;dynamic&gt;</code> )           \u2013            </li> <li> <code>temperature</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>base_url</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>api_key</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            </li> </ul> <p>Methods:</p> <ul> <li> <code>acompletion</code>             \u2013              </li> <li> <code>from_args</code>             \u2013              </li> <li> <code>live</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>api_key</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>base_url</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>model</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>router</code>               (<code>Router</code>)           \u2013            </li> <li> <code>temperature</code>               (<code>float | None</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/lime/llm/#liblaf.lime.llm.LLM.api_key","title":"api_key  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>api_key: str | None = None\n</code></pre>"},{"location":"reference/liblaf/lime/llm/#liblaf.lime.llm.LLM.base_url","title":"base_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>base_url: str | None = None\n</code></pre>"},{"location":"reference/liblaf/lime/llm/#liblaf.lime.llm.LLM.model","title":"model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model: str | None = None\n</code></pre>"},{"location":"reference/liblaf/lime/llm/#liblaf.lime.llm.LLM.router","title":"router  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>router: Router = field(factory=Router)\n</code></pre>"},{"location":"reference/liblaf/lime/llm/#liblaf.lime.llm.LLM.temperature","title":"temperature  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>temperature: float | None = None\n</code></pre>"},{"location":"reference/liblaf/lime/llm/#liblaf.lime.llm.LLM.acompletion","title":"acompletion  <code>async</code>","text":"<pre><code>acompletion(\n    messages: str | Sequence[AllMessageValues],\n    model: str | None = None,\n    **kwargs,\n) -&gt; CustomStreamWrapper\n</code></pre> Source code in <code>src/liblaf/lime/llm/_llm.py</code> <pre><code>async def acompletion(\n    self,\n    messages: str | Sequence[litellm.AllMessageValues],\n    model: str | None = None,\n    **kwargs,\n) -&gt; litellm.CustomStreamWrapper:\n    kwargs: dict[str, Any] = self._prepare_kwargs(\n        messages=messages, model=model, **kwargs\n    )\n    return await self.router.acompletion(**kwargs)\n</code></pre>"},{"location":"reference/liblaf/lime/llm/#liblaf.lime.llm.LLM.from_args","title":"from_args  <code>classmethod</code>","text":"<pre><code>from_args(args: LLMArgs) -&gt; Self\n</code></pre> Source code in <code>src/liblaf/lime/llm/_llm.py</code> <pre><code>@classmethod\ndef from_args(cls, args: LLMArgs) -&gt; Self:\n    config = LLMConfig()\n    return cls(\n        model=args.model or config.model,\n        router=config.router.build(),\n        temperature=args.temperature,\n        base_url=args.base_url,\n        api_key=args.api_key,\n    )\n</code></pre>"},{"location":"reference/liblaf/lime/llm/#liblaf.lime.llm.LLM.live","title":"live  <code>async</code>","text":"<pre><code>live(\n    messages: str | Sequence[AllMessageValues],\n    model: str | None = None,\n    parser: Callable | None = None,\n    **kwargs,\n) -&gt; ModelResponse\n</code></pre> Source code in <code>src/liblaf/lime/llm/_llm.py</code> <pre><code>async def live(\n    self,\n    messages: str | Sequence[litellm.AllMessageValues],\n    model: str | None = None,\n    parser: Callable | None = None,\n    **kwargs,\n) -&gt; litellm.ModelResponse:\n    kwargs: dict[str, Any] = self._prepare_kwargs(\n        messages=messages, model=model, **kwargs\n    )\n    model: str = kwargs[\"model\"]\n    stream: litellm.CustomStreamWrapper = await self.router.acompletion(**kwargs)\n    chunks: list[litellm.ModelResponseStream | None] = []\n    with Live(screen=True) as live:\n        spinner: Spinner = Spinner(\n            name=\"dots\",\n            text=Text(f\"\ud83e\udd16 {model} (Waiting for response ...)\", style=\"bold cyan\"),\n            style=\"bold cyan\",\n        )\n        live.update(Group(spinner))\n        async for chunk in stream:\n            chunks.append(chunk)\n            response: litellm.ModelResponse = litellm.stream_chunk_builder(chunks)  # pyright: ignore[reportAssignmentType]\n            message: litellm.Message = response.choices[0].message  # pyright: ignore[reportAttributeAccessIssue]\n            if response.model:\n                model = response.model\n            if content := cast(\"str\", message.content):\n                spinner.update(text=Text(f\"\ud83e\udd16 {model}\", style=\"bold cyan\"))\n                if parser is not None:\n                    content: str = parser(content)\n                live.update(Group(spinner, tools.Tail(Text(content), margin=1)))\n            elif message.reasoning_content:\n                spinner.update(\n                    text=Text(f\"\ud83e\udd16 {model} (Reasoning ...)\", style=\"bold cyan\")\n                )\n                live.update(\n                    Group(\n                        spinner,\n                        tools.Tail(\n                            Text(message.reasoning_content, style=\"dim\"), margin=1\n                        ),\n                    )\n                )\n    response: litellm.ModelResponse = litellm.stream_chunk_builder(chunks)  # pyright: ignore[reportAssignmentType]\n    return response\n</code></pre>"},{"location":"reference/liblaf/lime/llm/#liblaf.lime.llm.LLMArgs","title":"LLMArgs","text":"<p>Parameters:</p> <ul> <li> <code>model</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>temperature</code>               (<code>float | None</code>)           \u2013            </li> <li> <code>base_url</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>api_key</code>               (<code>str | None</code>)           \u2013            </li> </ul> <p>Attributes:</p> <ul> <li> <code>api_key</code>               (<code>Annotated[str | None, Arg(long=True, default=None, group=LLM)]</code>)           \u2013            </li> <li> <code>base_url</code>               (<code>Annotated[str | None, Arg(long=True, default=None, group=LLM)]</code>)           \u2013            </li> <li> <code>model</code>               (<code>Annotated[str | None, Arg(long=True, default=None, group=LLM)]</code>)           \u2013            </li> <li> <code>temperature</code>               (<code>Annotated[float | None, Arg(long=True, default=None, group=LLM)]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/lime/llm/#liblaf.lime.llm.LLMArgs.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: Annotated[\n    str | None, Arg(long=True, default=None, group=LLM)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/llm/#liblaf.lime.llm.LLMArgs.base_url","title":"base_url  <code>instance-attribute</code>","text":"<pre><code>base_url: Annotated[\n    str | None, Arg(long=True, default=None, group=LLM)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/llm/#liblaf.lime.llm.LLMArgs.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model: Annotated[\n    str | None, Arg(long=True, default=None, group=LLM)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/llm/#liblaf.lime.llm.LLMArgs.temperature","title":"temperature  <code>instance-attribute</code>","text":"<pre><code>temperature: Annotated[\n    float | None, Arg(long=True, default=None, group=LLM)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/llm/#liblaf.lime.llm.LLMConfig","title":"LLMConfig","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Parameters:</p> <ul> <li> <code>model</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>router</code>               (<code>RouterConfig</code>, default:                   <code>RouterConfig(model_list=[ModelConfig(model_name='deepseek-reasoner', litellm_params=CompletionRequest(model='deepseek/deepseek-reasoner', messages=[], timeout=None, temperature=None, top_p=None, n=None, stream=None, stop=None, max_tokens=None, presence_penalty=None, frequency_penalty=None, logit_bias=None, user=None, response_format=None, seed=None, tools=None, tool_choice=None, logprobs=None, top_logprobs=None, deployment_id=None, functions=None, function_call=None, base_url=None, api_version=None, api_key=None, model_list=None), tpm=None, rpm=None), ModelConfig(model_name='deepseek-chat', litellm_params=CompletionRequest(model='deepseek/deepseek-chat', messages=[], timeout=None, temperature=None, top_p=None, n=None, stream=None, stop=None, max_tokens=None, presence_penalty=None, frequency_penalty=None, logit_bias=None, user=None, response_format=None, seed=None, tools=None, tool_choice=None, logprobs=None, top_logprobs=None, deployment_id=None, functions=None, function_call=None, base_url=None, api_version=None, api_key=None, model_list=None), tpm=None, rpm=None), ModelConfig(model_name='qwen3-coder-plus', litellm_params=CompletionRequest(model='dashscope/qwen3-coder-plus', messages=[], timeout=None, temperature=None, top_p=None, n=None, stream=None, stop=None, max_tokens=None, presence_penalty=None, frequency_penalty=None, logit_bias=None, user=None, response_format=None, seed=None, tools=None, tool_choice=None, logprobs=None, top_logprobs=None, deployment_id=None, functions=None, function_call=None, base_url=None, api_version=None, api_key=None, model_list=None), tpm=None, rpm=None)], redis_url=None, redis_host=None, redis_port=None, redis_password=None, cache_responses=False, cache_kwargs={}, caching_groups=None, client_ttl=3600, num_retries=0, timeout=None, default_litellm_params={}, set_verbose=False, fallbacks=[], allowed_fails=None, context_window_fallbacks=[{'deepseek-chat': ['qwen3-coder-plus']}, {'deepseek-reasoner': ['qwen3-coder-plus']}], model_group_alias={}, retry_after=0, routing_strategy='simple-shuffle')</code> )           \u2013            </li> </ul> <p>Methods:</p> <ul> <li> <code>settings_customise_sources</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>model</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>router</code>               (<code>RouterConfig</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/lime/llm/#liblaf.lime.llm.LLMConfig.model","title":"model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model: str | None = None\n</code></pre>"},{"location":"reference/liblaf/lime/llm/#liblaf.lime.llm.LLMConfig.router","title":"router  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>router: RouterConfig = RouterConfig()\n</code></pre>"},{"location":"reference/liblaf/lime/llm/#liblaf.lime.llm.LLMConfig.settings_customise_sources","title":"settings_customise_sources  <code>classmethod</code>","text":"<pre><code>settings_customise_sources(\n    settings_cls: type[BaseSettings],\n    init_settings: PydanticBaseSettingsSource,\n    env_settings: PydanticBaseSettingsSource,\n    dotenv_settings: PydanticBaseSettingsSource,\n    file_secret_settings: PydanticBaseSettingsSource,\n) -&gt; tuple[PydanticBaseSettingsSource, ...]\n</code></pre> Source code in <code>src/liblaf/lime/llm/_config.py</code> <pre><code>@override\n@classmethod\ndef settings_customise_sources(\n    cls,\n    settings_cls: type[ps.BaseSettings],\n    init_settings: ps.PydanticBaseSettingsSource,\n    env_settings: ps.PydanticBaseSettingsSource,\n    dotenv_settings: ps.PydanticBaseSettingsSource,\n    file_secret_settings: ps.PydanticBaseSettingsSource,\n) -&gt; tuple[ps.PydanticBaseSettingsSource, ...]:\n    sources: Sequence[ps.PydanticBaseSettingsSource] = (\n        super().settings_customise_sources(\n            settings_cls,\n            init_settings,\n            env_settings,\n            dotenv_settings,\n            file_secret_settings,\n        )\n    )\n    dirs: platformdirs.AppDirs = platformdirs.AppDirs(\n        appname=\"liblaf/lime\", appauthor=\"liblaf\"\n    )\n    toml_config = ps.TomlConfigSettingsSource(\n        settings_cls,\n        toml_file=[cfg / \"config.toml\" for cfg in dirs.iter_config_paths()],\n    )\n    return (*sources, toml_config)\n</code></pre>"},{"location":"reference/liblaf/lime/llm/#liblaf.lime.llm.RouterConfig","title":"RouterConfig  <code>pydantic-model</code>","text":"<p>               Bases: <code>RouterConfig</code>, <code>BaseModel</code></p> <p>Parameters:</p> <ul> <li> <code>model_list</code>               (<code>list[ModelConfig]</code>, default:                   <code>[ModelConfig(model_name='deepseek-reasoner', litellm_params=CompletionRequest(model='deepseek/deepseek-reasoner', messages=[], timeout=None, temperature=None, top_p=None, n=None, stream=None, stop=None, max_tokens=None, presence_penalty=None, frequency_penalty=None, logit_bias=None, user=None, response_format=None, seed=None, tools=None, tool_choice=None, logprobs=None, top_logprobs=None, deployment_id=None, functions=None, function_call=None, base_url=None, api_version=None, api_key=None, model_list=None), tpm=None, rpm=None), ModelConfig(model_name='deepseek-chat', litellm_params=CompletionRequest(model='deepseek/deepseek-chat', messages=[], timeout=None, temperature=None, top_p=None, n=None, stream=None, stop=None, max_tokens=None, presence_penalty=None, frequency_penalty=None, logit_bias=None, user=None, response_format=None, seed=None, tools=None, tool_choice=None, logprobs=None, top_logprobs=None, deployment_id=None, functions=None, function_call=None, base_url=None, api_version=None, api_key=None, model_list=None), tpm=None, rpm=None), ModelConfig(model_name='qwen3-coder-plus', litellm_params=CompletionRequest(model='dashscope/qwen3-coder-plus', messages=[], timeout=None, temperature=None, top_p=None, n=None, stream=None, stop=None, max_tokens=None, presence_penalty=None, frequency_penalty=None, logit_bias=None, user=None, response_format=None, seed=None, tools=None, tool_choice=None, logprobs=None, top_logprobs=None, deployment_id=None, functions=None, function_call=None, base_url=None, api_version=None, api_key=None, model_list=None), tpm=None, rpm=None)]</code> )           \u2013            </li> <li> <code>redis_url</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>redis_host</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>redis_port</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>redis_password</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>cache_responses</code>               (<code>bool | None</code>, default:                   <code>False</code> )           \u2013            </li> <li> <code>cache_kwargs</code>               (<code>Dict | None</code>, default:                   <code>{}</code> )           \u2013            </li> <li> <code>caching_groups</code>               (<code>List[Tuple[str, List[str]]] | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>client_ttl</code>               (<code>int | None</code>, default:                   <code>3600</code> )           \u2013            </li> <li> <code>num_retries</code>               (<code>int | None</code>, default:                   <code>0</code> )           \u2013            </li> <li> <code>timeout</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>default_litellm_params</code>               (<code>Dict[str, str] | None</code>, default:                   <code>{}</code> )           \u2013            </li> <li> <code>set_verbose</code>               (<code>bool | None</code>, default:                   <code>False</code> )           \u2013            </li> <li> <code>fallbacks</code>               (<code>List | None</code>, default:                   <code>[]</code> )           \u2013            </li> <li> <code>allowed_fails</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            </li> <li> <code>context_window_fallbacks</code>               (<code>list[dict[str, list[str]]]</code>, default:                   <code>[{'deepseek-chat': ['qwen3-coder-plus']}, {'deepseek-reasoner': ['qwen3-coder-plus']}]</code> )           \u2013            </li> <li> <code>model_group_alias</code>               (<code>Dict[str, List[str]] | None</code>, default:                   <code>{}</code> )           \u2013            </li> <li> <code>retry_after</code>               (<code>int | None</code>, default:                   <code>0</code> )           \u2013            </li> <li> <code>routing_strategy</code>               (<code>Literal[simple - shuffle, least - busy, usage - based - routing, latency - based - routing]</code>, default:                   <code>'simple-shuffle'</code> )           \u2013            </li> </ul> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"ChatCompletionAssistantMessageParam\": {\n      \"properties\": {\n        \"role\": {\n          \"const\": \"assistant\",\n          \"title\": \"Role\",\n          \"type\": \"string\"\n        },\n        \"content\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Content\"\n        },\n        \"function_call\": {\n          \"$ref\": \"#/$defs/FunctionCall\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"tool_calls\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/ChatCompletionMessageToolCallParam\"\n          },\n          \"title\": \"Tool Calls\",\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"role\"\n      ],\n      \"title\": \"ChatCompletionAssistantMessageParam\",\n      \"type\": \"object\"\n    },\n    \"ChatCompletionContentPartImageParam\": {\n      \"properties\": {\n        \"image_url\": {\n          \"$ref\": \"#/$defs/ImageURL\"\n        },\n        \"type\": {\n          \"const\": \"image_url\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"image_url\",\n        \"type\"\n      ],\n      \"title\": \"ChatCompletionContentPartImageParam\",\n      \"type\": \"object\"\n    },\n    \"ChatCompletionContentPartTextParam\": {\n      \"properties\": {\n        \"text\": {\n          \"title\": \"Text\",\n          \"type\": \"string\"\n        },\n        \"type\": {\n          \"const\": \"text\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"text\",\n        \"type\"\n      ],\n      \"title\": \"ChatCompletionContentPartTextParam\",\n      \"type\": \"object\"\n    },\n    \"ChatCompletionFunctionMessageParam\": {\n      \"properties\": {\n        \"content\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"items\": {\n                \"anyOf\": [\n                  {\n                    \"$ref\": \"#/$defs/ChatCompletionContentPartTextParam\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/ChatCompletionContentPartImageParam\"\n                  }\n                ]\n              },\n              \"type\": \"array\"\n            }\n          ],\n          \"title\": \"Content\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"role\": {\n          \"const\": \"function\",\n          \"title\": \"Role\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"content\",\n        \"name\",\n        \"role\"\n      ],\n      \"title\": \"ChatCompletionFunctionMessageParam\",\n      \"type\": \"object\"\n    },\n    \"ChatCompletionMessageToolCallParam\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"function\": {\n          \"$ref\": \"#/$defs/Function\"\n        },\n        \"type\": {\n          \"const\": \"function\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"id\",\n        \"function\",\n        \"type\"\n      ],\n      \"title\": \"ChatCompletionMessageToolCallParam\",\n      \"type\": \"object\"\n    },\n    \"ChatCompletionSystemMessageParam\": {\n      \"properties\": {\n        \"content\": {\n          \"title\": \"Content\",\n          \"type\": \"string\"\n        },\n        \"role\": {\n          \"const\": \"system\",\n          \"title\": \"Role\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"content\",\n        \"role\"\n      ],\n      \"title\": \"ChatCompletionSystemMessageParam\",\n      \"type\": \"object\"\n    },\n    \"ChatCompletionToolMessageParam\": {\n      \"properties\": {\n        \"content\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"items\": {\n                \"anyOf\": [\n                  {\n                    \"$ref\": \"#/$defs/ChatCompletionContentPartTextParam\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/ChatCompletionContentPartImageParam\"\n                  }\n                ]\n              },\n              \"type\": \"array\"\n            }\n          ],\n          \"title\": \"Content\"\n        },\n        \"role\": {\n          \"const\": \"tool\",\n          \"title\": \"Role\",\n          \"type\": \"string\"\n        },\n        \"tool_call_id\": {\n          \"title\": \"Tool Call Id\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"content\",\n        \"role\",\n        \"tool_call_id\"\n      ],\n      \"title\": \"ChatCompletionToolMessageParam\",\n      \"type\": \"object\"\n    },\n    \"ChatCompletionUserMessageParam\": {\n      \"properties\": {\n        \"content\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"items\": {\n                \"anyOf\": [\n                  {\n                    \"$ref\": \"#/$defs/ChatCompletionContentPartTextParam\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/ChatCompletionContentPartImageParam\"\n                  }\n                ]\n              },\n              \"type\": \"array\"\n            }\n          ],\n          \"title\": \"Content\"\n        },\n        \"role\": {\n          \"const\": \"user\",\n          \"title\": \"Role\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"content\",\n        \"role\"\n      ],\n      \"title\": \"ChatCompletionUserMessageParam\",\n      \"type\": \"object\"\n    },\n    \"CompletionRequest\": {\n      \"additionalProperties\": true,\n      \"properties\": {\n        \"model\": {\n          \"title\": \"Model\",\n          \"type\": \"string\"\n        },\n        \"messages\": {\n          \"default\": [],\n          \"items\": {\n            \"anyOf\": [\n              {\n                \"$ref\": \"#/$defs/ChatCompletionSystemMessageParam\"\n              },\n              {\n                \"$ref\": \"#/$defs/ChatCompletionUserMessageParam\"\n              },\n              {\n                \"$ref\": \"#/$defs/ChatCompletionAssistantMessageParam\"\n              },\n              {\n                \"$ref\": \"#/$defs/ChatCompletionFunctionMessageParam\"\n              },\n              {\n                \"$ref\": \"#/$defs/ChatCompletionToolMessageParam\"\n              }\n            ]\n          },\n          \"title\": \"Messages\",\n          \"type\": \"array\"\n        },\n        \"timeout\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Timeout\"\n        },\n        \"temperature\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Temperature\"\n        },\n        \"top_p\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Top P\"\n        },\n        \"n\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"N\"\n        },\n        \"stream\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Stream\"\n        },\n        \"stop\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": true,\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Stop\"\n        },\n        \"max_tokens\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Max Tokens\"\n        },\n        \"presence_penalty\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Presence Penalty\"\n        },\n        \"frequency_penalty\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Frequency Penalty\"\n        },\n        \"logit_bias\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": true,\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Logit Bias\"\n        },\n        \"user\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"User\"\n        },\n        \"response_format\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": true,\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Response Format\"\n        },\n        \"seed\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Seed\"\n        },\n        \"tools\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Tools\"\n        },\n        \"tool_choice\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Tool Choice\"\n        },\n        \"logprobs\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Logprobs\"\n        },\n        \"top_logprobs\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Top Logprobs\"\n        },\n        \"deployment_id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Deployment Id\"\n        },\n        \"functions\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Functions\"\n        },\n        \"function_call\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Function Call\"\n        },\n        \"base_url\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Base Url\"\n        },\n        \"api_version\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Api Version\"\n        },\n        \"api_key\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Api Key\"\n        },\n        \"model_list\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Model List\"\n        }\n      },\n      \"required\": [\n        \"model\"\n      ],\n      \"title\": \"CompletionRequest\",\n      \"type\": \"object\"\n    },\n    \"EmbeddingRequest\": {\n      \"additionalProperties\": true,\n      \"properties\": {\n        \"model\": {\n          \"title\": \"Model\",\n          \"type\": \"string\"\n        },\n        \"input\": {\n          \"default\": [],\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"title\": \"Input\",\n          \"type\": \"array\"\n        },\n        \"timeout\": {\n          \"default\": 600,\n          \"title\": \"Timeout\",\n          \"type\": \"integer\"\n        },\n        \"api_base\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Api Base\"\n        },\n        \"api_version\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Api Version\"\n        },\n        \"api_key\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Api Key\"\n        },\n        \"api_type\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Api Type\"\n        },\n        \"caching\": {\n          \"default\": false,\n          \"title\": \"Caching\",\n          \"type\": \"boolean\"\n        },\n        \"user\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"User\"\n        },\n        \"custom_llm_provider\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"additionalProperties\": true,\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Custom Llm Provider\"\n        },\n        \"litellm_call_id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Litellm Call Id\"\n        },\n        \"litellm_logging_obj\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": true,\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Litellm Logging Obj\"\n        },\n        \"logger_fn\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Logger Fn\"\n        }\n      },\n      \"required\": [\n        \"model\"\n      ],\n      \"title\": \"EmbeddingRequest\",\n      \"type\": \"object\"\n    },\n    \"Function\": {\n      \"properties\": {\n        \"arguments\": {\n          \"title\": \"Arguments\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"arguments\",\n        \"name\"\n      ],\n      \"title\": \"Function\",\n      \"type\": \"object\"\n    },\n    \"FunctionCall\": {\n      \"properties\": {\n        \"arguments\": {\n          \"title\": \"Arguments\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"arguments\",\n        \"name\"\n      ],\n      \"title\": \"FunctionCall\",\n      \"type\": \"object\"\n    },\n    \"ImageURL\": {\n      \"properties\": {\n        \"url\": {\n          \"title\": \"Url\",\n          \"type\": \"string\"\n        },\n        \"detail\": {\n          \"enum\": [\n            \"auto\",\n            \"low\",\n            \"high\"\n          ],\n          \"title\": \"Detail\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"url\"\n      ],\n      \"title\": \"ImageURL\",\n      \"type\": \"object\"\n    },\n    \"ModelConfig\": {\n      \"properties\": {\n        \"model_name\": {\n          \"title\": \"Model Name\",\n          \"type\": \"string\"\n        },\n        \"litellm_params\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/CompletionRequest\"\n            },\n            {\n              \"$ref\": \"#/$defs/EmbeddingRequest\"\n            }\n          ],\n          \"title\": \"Litellm Params\"\n        },\n        \"tpm\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Tpm\"\n        },\n        \"rpm\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Rpm\"\n        }\n      },\n      \"required\": [\n        \"model_name\",\n        \"litellm_params\"\n      ],\n      \"title\": \"ModelConfig\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"model_list\": {\n      \"default\": [\n        {\n          \"model_name\": \"deepseek-reasoner\",\n          \"litellm_params\": {\n            \"api_key\": null,\n            \"api_version\": null,\n            \"base_url\": null,\n            \"deployment_id\": null,\n            \"frequency_penalty\": null,\n            \"function_call\": null,\n            \"functions\": null,\n            \"logit_bias\": null,\n            \"logprobs\": null,\n            \"max_tokens\": null,\n            \"messages\": [],\n            \"model\": \"deepseek/deepseek-reasoner\",\n            \"model_list\": null,\n            \"n\": null,\n            \"presence_penalty\": null,\n            \"response_format\": null,\n            \"seed\": null,\n            \"stop\": null,\n            \"stream\": null,\n            \"temperature\": null,\n            \"timeout\": null,\n            \"tool_choice\": null,\n            \"tools\": null,\n            \"top_logprobs\": null,\n            \"top_p\": null,\n            \"user\": null\n          },\n          \"tpm\": null,\n          \"rpm\": null\n        },\n        {\n          \"model_name\": \"deepseek-chat\",\n          \"litellm_params\": {\n            \"api_key\": null,\n            \"api_version\": null,\n            \"base_url\": null,\n            \"deployment_id\": null,\n            \"frequency_penalty\": null,\n            \"function_call\": null,\n            \"functions\": null,\n            \"logit_bias\": null,\n            \"logprobs\": null,\n            \"max_tokens\": null,\n            \"messages\": [],\n            \"model\": \"deepseek/deepseek-chat\",\n            \"model_list\": null,\n            \"n\": null,\n            \"presence_penalty\": null,\n            \"response_format\": null,\n            \"seed\": null,\n            \"stop\": null,\n            \"stream\": null,\n            \"temperature\": null,\n            \"timeout\": null,\n            \"tool_choice\": null,\n            \"tools\": null,\n            \"top_logprobs\": null,\n            \"top_p\": null,\n            \"user\": null\n          },\n          \"tpm\": null,\n          \"rpm\": null\n        },\n        {\n          \"model_name\": \"qwen3-coder-plus\",\n          \"litellm_params\": {\n            \"api_key\": null,\n            \"api_version\": null,\n            \"base_url\": null,\n            \"deployment_id\": null,\n            \"frequency_penalty\": null,\n            \"function_call\": null,\n            \"functions\": null,\n            \"logit_bias\": null,\n            \"logprobs\": null,\n            \"max_tokens\": null,\n            \"messages\": [],\n            \"model\": \"dashscope/qwen3-coder-plus\",\n            \"model_list\": null,\n            \"n\": null,\n            \"presence_penalty\": null,\n            \"response_format\": null,\n            \"seed\": null,\n            \"stop\": null,\n            \"stream\": null,\n            \"temperature\": null,\n            \"timeout\": null,\n            \"tool_choice\": null,\n            \"tools\": null,\n            \"top_logprobs\": null,\n            \"top_p\": null,\n            \"user\": null\n          },\n          \"tpm\": null,\n          \"rpm\": null\n        }\n      ],\n      \"items\": {\n        \"$ref\": \"#/$defs/ModelConfig\"\n      },\n      \"title\": \"Model List\",\n      \"type\": \"array\"\n    },\n    \"redis_url\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Redis Url\"\n    },\n    \"redis_host\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Redis Host\"\n    },\n    \"redis_port\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Redis Port\"\n    },\n    \"redis_password\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Redis Password\"\n    },\n    \"cache_responses\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": false,\n      \"title\": \"Cache Responses\"\n    },\n    \"cache_kwargs\": {\n      \"anyOf\": [\n        {\n          \"additionalProperties\": true,\n          \"type\": \"object\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": {},\n      \"title\": \"Cache Kwargs\"\n    },\n    \"caching_groups\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"maxItems\": 2,\n            \"minItems\": 2,\n            \"prefixItems\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"items\": {\n                  \"type\": \"string\"\n                },\n                \"type\": \"array\"\n              }\n            ],\n            \"type\": \"array\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Caching Groups\"\n    },\n    \"client_ttl\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": 3600,\n      \"title\": \"Client Ttl\"\n    },\n    \"num_retries\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": 0,\n      \"title\": \"Num Retries\"\n    },\n    \"timeout\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Timeout\"\n    },\n    \"default_litellm_params\": {\n      \"anyOf\": [\n        {\n          \"additionalProperties\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"object\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": {},\n      \"title\": \"Default Litellm Params\"\n    },\n    \"set_verbose\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": false,\n      \"title\": \"Set Verbose\"\n    },\n    \"fallbacks\": {\n      \"anyOf\": [\n        {\n          \"items\": {},\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": [],\n      \"title\": \"Fallbacks\"\n    },\n    \"allowed_fails\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Allowed Fails\"\n    },\n    \"context_window_fallbacks\": {\n      \"default\": [\n        {\n          \"deepseek-chat\": [\n            \"qwen3-coder-plus\"\n          ]\n        },\n        {\n          \"deepseek-reasoner\": [\n            \"qwen3-coder-plus\"\n          ]\n        }\n      ],\n      \"items\": {\n        \"additionalProperties\": {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        \"type\": \"object\"\n      },\n      \"title\": \"Context Window Fallbacks\",\n      \"type\": \"array\"\n    },\n    \"model_group_alias\": {\n      \"anyOf\": [\n        {\n          \"additionalProperties\": {\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          },\n          \"type\": \"object\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": {},\n      \"title\": \"Model Group Alias\"\n    },\n    \"retry_after\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": 0,\n      \"title\": \"Retry After\"\n    },\n    \"routing_strategy\": {\n      \"default\": \"simple-shuffle\",\n      \"enum\": [\n        \"simple-shuffle\",\n        \"least-busy\",\n        \"usage-based-routing\",\n        \"latency-based-routing\"\n      ],\n      \"title\": \"Routing Strategy\",\n      \"type\": \"string\"\n    }\n  },\n  \"title\": \"RouterConfig\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>model_list</code>                 (<code>list[ModelConfig]</code>)             </li> <li> <code>context_window_fallbacks</code>                 (<code>list[dict[str, list[str]]]</code>)             </li> </ul>"},{"location":"reference/liblaf/lime/llm/#liblaf.lime.llm.RouterConfig.context_window_fallbacks","title":"context_window_fallbacks  <code>pydantic-field</code>","text":"<pre><code>context_window_fallbacks: list[dict[str, list[str]]] = [\n    {\"deepseek-chat\": [\"qwen3-coder-plus\"]},\n    {\"deepseek-reasoner\": [\"qwen3-coder-plus\"]},\n]\n</code></pre>"},{"location":"reference/liblaf/lime/llm/#liblaf.lime.llm.RouterConfig.model_list","title":"model_list  <code>pydantic-field</code>","text":"<pre><code>model_list: list[ModelConfig] = [\n    ModelConfig(\n        model_name=\"deepseek-reasoner\",\n        litellm_params=CompletionRequest(\n            model=\"deepseek/deepseek-reasoner\"\n        ),\n    ),\n    ModelConfig(\n        model_name=\"deepseek-chat\",\n        litellm_params=CompletionRequest(\n            model=\"deepseek/deepseek-chat\"\n        ),\n    ),\n    ModelConfig(\n        model_name=\"qwen3-coder-plus\",\n        litellm_params=CompletionRequest(\n            model=\"dashscope/qwen3-coder-plus\"\n        ),\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/llm/#liblaf.lime.llm.RouterConfig.build","title":"build","text":"<pre><code>build() -&gt; Router\n</code></pre> Source code in <code>src/liblaf/lime/llm/_config.py</code> <pre><code>def build(self) -&gt; litellm.Router:\n    return litellm.Router(**self.model_dump())\n</code></pre>"},{"location":"reference/liblaf/lime/tools/","title":"liblaf.lime.tools","text":""},{"location":"reference/liblaf/lime/tools/#liblaf.lime.tools","title":"liblaf.lime.tools","text":"<p>Modules:</p> <ul> <li> <code>constants</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>Git</code>           \u2013            </li> <li> <code>RepomixArgs</code>           \u2013            </li> <li> <code>Tail</code>           \u2013            <p>.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>extract_between_tags</code>             \u2013              </li> <li> <code>prompt_templates</code>             \u2013              </li> <li> <code>repomix</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>DEFAULT_IGNORES</code>               (<code>list[str]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/lime/tools/#liblaf.lime.tools.DEFAULT_IGNORES","title":"DEFAULT_IGNORES  <code>module-attribute</code>","text":"<pre><code>DEFAULT_IGNORES: list[str] = [\n    \".cspell.*\",\n    \"*-lock.*\",\n    \"*.lock\",\n    \"*.lockb\",\n    \"CHANGELOG.md\",\n    \"cspell.*\",\n]\n</code></pre>"},{"location":"reference/liblaf/lime/tools/#liblaf.lime.tools.Git","title":"Git","text":"<p>Parameters:</p> <ul> <li> <code>repo</code>               (<code>Repo</code>, default:                   <code>&lt;git.repo.base.Repo '/home/runner/work/lime/lime/.git'&gt;</code> )           \u2013            </li> </ul> <p>Methods:</p> <ul> <li> <code>commit</code>             \u2013              </li> <li> <code>diff</code>             \u2013              </li> <li> <code>ls_files</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>info</code>               (<code>GitInfo</code>)           \u2013            </li> <li> <code>repo</code>               (<code>Repo</code>)           \u2013            </li> <li> <code>root</code>               (<code>Path</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/lime/tools/#liblaf.lime.tools.Git.info","title":"info  <code>property</code>","text":"<pre><code>info: GitInfo\n</code></pre>"},{"location":"reference/liblaf/lime/tools/#liblaf.lime.tools.Git.repo","title":"repo  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>repo: Repo = field(\n    factory=lambda: Repo(search_parent_directories=True)\n)\n</code></pre>"},{"location":"reference/liblaf/lime/tools/#liblaf.lime.tools.Git.root","title":"root  <code>property</code>","text":"<pre><code>root: Path\n</code></pre>"},{"location":"reference/liblaf/lime/tools/#liblaf.lime.tools.Git.commit","title":"commit  <code>async</code>","text":"<pre><code>commit(\n    message: str | None = None,\n    *,\n    edit: bool = False,\n    exit_on_error: bool = False,\n) -&gt; None\n</code></pre> Source code in <code>src/liblaf/lime/tools/_git.py</code> <pre><code>async def commit(\n    self,\n    message: str | None = None,\n    *,\n    edit: bool = False,\n    exit_on_error: bool = False,\n) -&gt; None:\n    cmd: list[StrOrBytesPath] = [\"git\", \"commit\"]\n    if message:\n        cmd.append(f\"--message={message}\")\n    if edit:\n        cmd.append(\"--edit\")\n    process: asyncio.subprocess.Process = (\n        await asyncio.subprocess.create_subprocess_exec(*cmd)\n    )\n    returncode: int = await process.wait()\n    if returncode != 0:\n        if exit_on_error:\n            raise cappa.Exit(code=returncode)\n        raise subprocess.CalledProcessError(returncode, cmd)\n</code></pre>"},{"location":"reference/liblaf/lime/tools/#liblaf.lime.tools.Git.diff","title":"diff","text":"<pre><code>diff(include: Sequence[StrOrBytesPath] = []) -&gt; str\n</code></pre> Source code in <code>src/liblaf/lime/tools/_git.py</code> <pre><code>def diff(self, include: Sequence[StrOrBytesPath] = []) -&gt; str:\n    args: list[StrOrBytesPath] = [\n        \"--minimal\",\n        \"--no-ext-diff\",\n        \"--cached\",\n        \"--\",\n        *include,\n    ]\n    return self.repo.git.diff(*args)\n</code></pre>"},{"location":"reference/liblaf/lime/tools/#liblaf.lime.tools.Git.ls_files","title":"ls_files","text":"<pre><code>ls_files(\n    ignore: Sequence[str] = [],\n    *,\n    default_ignore: bool = True,\n    ignore_generated: bool = True,\n) -&gt; Generator[Path]\n</code></pre> Source code in <code>src/liblaf/lime/tools/_git.py</code> <pre><code>def ls_files(\n    self,\n    ignore: Sequence[str] = [],\n    *,\n    default_ignore: bool = True,\n    ignore_generated: bool = True,\n) -&gt; Generator[Path]:\n    if default_ignore:\n        ignore = [*DEFAULT_IGNORES, *ignore]\n    gi: gitmatch.Gitignore[str] = gitmatch.compile(ignore)\n    entries: Iterable[PathLike] = [entry for entry, _ in self.repo.index.entries]\n    entries = filter_git_lfs(entries, root=self.root)\n    for entry in entries:\n        path: Path = Path(entry)\n        if gi.match(path):\n            continue\n        if is_binary(self.root, path):\n            continue\n        if ignore_generated and is_generated(self.root, path):\n            continue\n        yield path\n</code></pre>"},{"location":"reference/liblaf/lime/tools/#liblaf.lime.tools.RepomixArgs","title":"RepomixArgs","text":"<p>Parameters:</p> <ul> <li> <code>compress</code>               (<code>bool</code>)           \u2013            </li> <li> <code>files</code>               (<code>bool</code>)           \u2013            </li> <li> <code>truncate_base64</code>               (<code>bool</code>)           \u2013            </li> <li> <code>default_ignore</code>               (<code>bool</code>)           \u2013            </li> <li> <code>ignore</code>               (<code>list[str]</code>)           \u2013            </li> <li> <code>ignore_generated</code>               (<code>bool</code>)           \u2013            </li> </ul> <p>Attributes:</p> <ul> <li> <code>compress</code>               (<code>Annotated[bool, Arg(long=[--compress, --no - compress], default=False, group=Repomix)]</code>)           \u2013            </li> <li> <code>default_ignore</code>               (<code>Annotated[bool, Arg(long=[--default - ignore, --no - default - ignore], default=True, group=Repomix)]</code>)           \u2013            </li> <li> <code>files</code>               (<code>Annotated[bool, Arg(long=[--files, --no - files], default=True, group=Repomix)]</code>)           \u2013            </li> <li> <code>ignore</code>               (<code>Annotated[list[str], Arg(long=True, default=[], group=Repomix)]</code>)           \u2013            </li> <li> <code>ignore_generated</code>               (<code>Annotated[bool, Arg(long=[--ignore - generated, --no - ignore - generated], default=True, group=Repomix)]</code>)           \u2013            </li> <li> <code>truncate_base64</code>               (<code>Annotated[bool, Arg(long=[--truncate - base64, --no - truncate - base64], default=True, group=Repomix)]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/lime/tools/#liblaf.lime.tools.RepomixArgs.compress","title":"compress  <code>instance-attribute</code>","text":"<pre><code>compress: Annotated[\n    bool,\n    Arg(\n        long=[--compress, --no - compress],\n        default=False,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/tools/#liblaf.lime.tools.RepomixArgs.default_ignore","title":"default_ignore  <code>instance-attribute</code>","text":"<pre><code>default_ignore: Annotated[\n    bool,\n    Arg(\n        long=[--default - ignore, --no - default - ignore],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/tools/#liblaf.lime.tools.RepomixArgs.files","title":"files  <code>instance-attribute</code>","text":"<pre><code>files: Annotated[\n    bool,\n    Arg(\n        long=[--files, --no - files],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/tools/#liblaf.lime.tools.RepomixArgs.ignore","title":"ignore  <code>instance-attribute</code>","text":"<pre><code>ignore: Annotated[\n    list[str], Arg(long=True, default=[], group=Repomix)\n]\n</code></pre>"},{"location":"reference/liblaf/lime/tools/#liblaf.lime.tools.RepomixArgs.ignore_generated","title":"ignore_generated  <code>instance-attribute</code>","text":"<pre><code>ignore_generated: Annotated[\n    bool,\n    Arg(\n        long=[\n            --ignore - generated,\n            --no - ignore - generated,\n        ],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/tools/#liblaf.lime.tools.RepomixArgs.truncate_base64","title":"truncate_base64  <code>instance-attribute</code>","text":"<pre><code>truncate_base64: Annotated[\n    bool,\n    Arg(\n        long=[\n            --truncate - base64,\n            --no - truncate - base64,\n        ],\n        default=True,\n        group=Repomix,\n    ),\n]\n</code></pre>"},{"location":"reference/liblaf/lime/tools/#liblaf.lime.tools.Tail","title":"Tail","text":"<p>.</p> References <ol> <li><code>rich.live_render.LiveRender</code></li> </ol> <p>Parameters:</p> <ul> <li> <code>renderable</code>               (<code>ConsoleRenderable | RichCast | str</code>)           \u2013            </li> <li> <code>margin</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            </li> </ul> <p>Methods:</p> <ul> <li> <code>__rich_console__</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>margin</code>               (<code>int</code>)           \u2013            </li> <li> <code>renderable</code>               (<code>RenderableType</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/lime/tools/#liblaf.lime.tools.Tail.margin","title":"margin  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>margin: int = 0\n</code></pre>"},{"location":"reference/liblaf/lime/tools/#liblaf.lime.tools.Tail.renderable","title":"renderable  <code>instance-attribute</code>","text":"<pre><code>renderable: RenderableType\n</code></pre>"},{"location":"reference/liblaf/lime/tools/#liblaf.lime.tools.Tail.__rich_console__","title":"__rich_console__","text":"<pre><code>__rich_console__(\n    console: Console, options: ConsoleOptions\n) -&gt; RenderResult\n</code></pre> Source code in <code>src/liblaf/lime/tools/_rich.py</code> <pre><code>def __rich_console__(\n    self, console: Console, options: ConsoleOptions\n) -&gt; RenderResult:\n    lines: list[list[Segment]] = console.render_lines(\n        self.renderable, options, pad=False\n    )\n    height: int\n    _, height = Segment.get_shape(lines)\n    if height + self.margin &gt; options.size.height:\n        lines = lines[-(options.size.height - self.margin - 1) :]\n        overflow_text = Text(\n            \"...\", style=\"live.ellipsis\", justify=\"center\", overflow=\"crop\", end=\"\"\n        )\n        lines.insert(0, list(console.render(overflow_text)))\n    newline: Segment = Segment.line()\n    for last, line in loop_last(lines):\n        yield from line\n        if not last:\n            yield newline\n</code></pre>"},{"location":"reference/liblaf/lime/tools/#liblaf.lime.tools.extract_between_tags","title":"extract_between_tags","text":"<pre><code>extract_between_tags(\n    content: str, tag: str, *, strip: bool = True\n) -&gt; str\n</code></pre> Source code in <code>src/liblaf/lime/tools/_xml.py</code> <pre><code>def extract_between_tags(content: str, tag: str, *, strip: bool = True) -&gt; str:\n    tag_open: str = f\"&lt;{tag}&gt;\"\n    tag_close: str = f\"&lt;/{tag}&gt;\"\n    idx_open: int = content.find(tag_open)\n    if idx_open != -1:\n        idx_open += len(tag_open)\n        content = content[idx_open:]\n    idx_close: int = content.find(tag_close)\n    if idx_close != -1:\n        content = content[:idx_close]\n    if strip:\n        content = content.strip()\n    return content\n</code></pre>"},{"location":"reference/liblaf/lime/tools/#liblaf.lime.tools.prompt_templates","title":"prompt_templates","text":"<pre><code>prompt_templates() -&gt; Environment\n</code></pre> Source code in <code>src/liblaf/lime/tools/_prompts.py</code> <pre><code>def prompt_templates() -&gt; jinja2.Environment:\n    return jinja2.Environment(\n        line_statement_prefix=\"%%\",\n        line_comment_prefix=\"%%%\",\n        undefined=jinja2.StrictUndefined,\n        autoescape=jinja2.select_autoescape(),\n        loader=jinja2.PackageLoader(\"liblaf.lime\", \"prompts\"),\n    )\n</code></pre>"},{"location":"reference/liblaf/lime/tools/#liblaf.lime.tools.repomix","title":"repomix  <code>async</code>","text":"<pre><code>repomix(\n    args: RepomixArgs,\n    *,\n    include: Sequence[str | PathLike[str]] = [],\n    instruction: str | None = None,\n    root: str | PathLike[str] | None = None,\n) -&gt; str\n</code></pre> Source code in <code>src/liblaf/lime/tools/_repomix/_invoke.py</code> <pre><code>async def repomix(\n    args: RepomixArgs,\n    *,\n    include: Sequence[str | os.PathLike[str]] = [],\n    instruction: str | None = None,\n    root: str | os.PathLike[str] | None = None,\n) -&gt; str:\n    config = RepomixConfig(\n        output=RepomixConfigOutput(\n            compress=args.compress,\n            files=args.files,\n            truncate_base64=args.truncate_base64,\n        ),\n        include=list(map(str, include)),\n    )\n    with tempfile.TemporaryDirectory() as tmpdir_str:\n        tmpdir: Path = Path(tmpdir_str)\n\n        cmd: list[StrOrBytesPath] = [\"repomix\"]\n\n        output: Path = tmpdir / \"repomix-output.xml\"\n        cmd += [\"--output\", output]\n\n        if instruction:\n            instruction_file: Path = tmpdir / \"repomix-instruction.md\"\n            instruction_file.write_text(instruction)\n            cmd += [\"--instruction-file-path\", instruction_file]\n\n        config_file: Path = tmpdir / \"repomix.config.json\"\n        config_file.write_text(config.model_dump_json(exclude_none=True))\n        cmd += [\"--config\", config_file]\n\n        process: asyncio.subprocess.Process = (\n            await asyncio.subprocess.create_subprocess_exec(*cmd, cwd=root)\n        )\n        returncode: int = await process.wait()\n        if returncode != 0:\n            raise subprocess.CalledProcessError(returncode, cmd)\n        return output.read_text()\n</code></pre>"},{"location":"reference/liblaf/lime/tools/constants/","title":"liblaf.lime.tools.constants","text":""},{"location":"reference/liblaf/lime/tools/constants/#liblaf.lime.tools.constants","title":"liblaf.lime.tools.constants","text":"<p>Attributes:</p> <ul> <li> <code>DEFAULT_IGNORES</code>               (<code>list[str]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/lime/tools/constants/#liblaf.lime.tools.constants.DEFAULT_IGNORES","title":"DEFAULT_IGNORES  <code>module-attribute</code>","text":"<pre><code>DEFAULT_IGNORES: list[str] = [\n    \".cspell.*\",\n    \"*-lock.*\",\n    \"*.lock\",\n    \"*.lockb\",\n    \"CHANGELOG.md\",\n    \"cspell.*\",\n]\n</code></pre>"}]}